// <auto-generated />
using System;
using MetroDelivery.Identity.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MetroDelivery.Identity.Migrations
{
    [DbContext(typeof(MetroPickupIdentityDbContext))]
    [Migration("20230930184443_InitDatabase")]
    partial class InitDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9afcdfac-1a27-496b-84e5-0c8e5804e40e"),
                            CategoryName = "Food",
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 79, DateTimeKind.Local).AddTicks(9932),
                            IsDelete = false
                        },
                        new
                        {
                            Id = new Guid("4078ef19-ba53-481d-9c5a-1c37dfe0e0dc"),
                            CategoryName = "Beverages",
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 79, DateTimeKind.Local).AddTicks(9956),
                            IsDelete = false
                        },
                        new
                        {
                            Id = new Guid("b7a3a853-73c6-4f02-913b-9765019e9bd0"),
                            CategoryName = "Bread",
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 79, DateTimeKind.Local).AddTicks(9963),
                            IsDelete = false
                        },
                        new
                        {
                            Id = new Guid("175d4c8d-d2f0-441b-85cb-45a1cb0b6756"),
                            CategoryName = "Candy",
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 79, DateTimeKind.Local).AddTicks(9972),
                            IsDelete = false
                        },
                        new
                        {
                            Id = new Guid("8908ea98-b421-420b-9634-03ed356bb921"),
                            CategoryName = "Chips",
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 79, DateTimeKind.Local).AddTicks(9974),
                            IsDelete = false
                        },
                        new
                        {
                            Id = new Guid("9b2cccb2-f5fa-4358-8265-0fe4f7a52253"),
                            CategoryName = "Cookies",
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 79, DateTimeKind.Local).AddTicks(9976),
                            IsDelete = false
                        },
                        new
                        {
                            Id = new Guid("39696f0c-2c8a-480f-b917-141b7da708e4"),
                            CategoryName = "Dairy",
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 79, DateTimeKind.Local).AddTicks(9978),
                            IsDelete = false
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f9589c1a-3cbc-4215-bb84-b8fa7d719440"),
                            Address = "da nang",
                            ApplicationUserId = "2C0B43BB-B991-408E-A8F3-2FD3B4A2AB84",
                            Birthday = new DateTime(2002, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(1931),
                            IsDelete = false,
                            Phone = "03030303"
                        },
                        new
                        {
                            Id = new Guid("b9cf3487-3d04-4cbf-85b7-e33360566485"),
                            Address = "hcm",
                            ApplicationUserId = "2198E4CD-3305-49C5-B78A-0B54DD76898F",
                            Birthday = new DateTime(2010, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(1962),
                            IsDelete = false,
                            Phone = "03030303"
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTimeService")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTimeService")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StoreID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StoreID");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Menu_Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MenuID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MenuID");

                    b.HasIndex("ProductID");

                    b.ToTable("Menu_Products");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderTokenQR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StoreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<Guid>("TripID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StoreID");

                    b.HasIndex("TripID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<int>("quanity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderID");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f841a49b-374f-4d4e-a617-a14ae14432ac"),
                            CategoryID = new Guid("175d4c8d-d2f0-441b-85cb-45a1cb0b6756"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(91),
                            IsDelete = false,
                            Price = 5000.5,
                            ProductDescription = "Kẹo thơm ngon được tạo ra từ các loại đường, được làm nóng và tạo nên hương vị ngọt ngào",
                            ProductName = "Keo bông gòn",
                            Stock = 300
                        },
                        new
                        {
                            Id = new Guid("54ef5873-f806-4219-91fe-13317132b25f"),
                            CategoryID = new Guid("175d4c8d-d2f0-441b-85cb-45a1cb0b6756"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(97),
                            IsDelete = false,
                            Price = 3000.0,
                            ProductDescription = "Kẹo lạc thơm ngon, giòn tan",
                            ProductName = "Kẹo lạc",
                            Stock = 200
                        },
                        new
                        {
                            Id = new Guid("42e319b7-a886-4a5e-ada7-7073acad7461"),
                            CategoryID = new Guid("175d4c8d-d2f0-441b-85cb-45a1cb0b6756"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(105),
                            IsDelete = false,
                            Price = 3000.0,
                            ProductDescription = "Kẹo lạc thơm ngon, giòn tan",
                            ProductName = "Kẹo chup",
                            Stock = 200
                        },
                        new
                        {
                            Id = new Guid("ff3e4948-bffa-4411-a2d1-f18ed4a26bef"),
                            CategoryID = new Guid("8908ea98-b421-420b-9634-03ed356bb921"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(108),
                            IsDelete = false,
                            Price = 10000.0,
                            ProductDescription = "Khoai tây chiên giòn tan",
                            ProductName = "Khoai tây chiên",
                            Stock = 500
                        },
                        new
                        {
                            Id = new Guid("f451c4e0-c67d-4c1e-91bb-02ffd4c3b8f2"),
                            CategoryID = new Guid("175d4c8d-d2f0-441b-85cb-45a1cb0b6756"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(111),
                            IsDelete = false,
                            Price = 2500.0,
                            ProductDescription = "Kẹo dẻo mềm, đàn hồi",
                            ProductName = "Kẹo dẻo",
                            Stock = 500
                        },
                        new
                        {
                            Id = new Guid("67477725-8289-4ea3-b6f8-f5d334a7b211"),
                            CategoryID = new Guid("9afcdfac-1a27-496b-84e5-0c8e5804e40e"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(115),
                            IsDelete = false,
                            Price = 30000.0,
                            ProductDescription = "Cơm gà xé thơm ngon",
                            ProductName = "Cơm gà xé",
                            Stock = 200
                        },
                        new
                        {
                            Id = new Guid("5a005906-e10a-4f55-8817-33d377b68c12"),
                            CategoryID = new Guid("9b2cccb2-f5fa-4358-8265-0fe4f7a52253"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(120),
                            IsDelete = false,
                            Price = 5000.0,
                            ProductDescription = "Bánh quy giòn tan trong miệng",
                            ProductName = "Bánh quy giòn",
                            Stock = 1000
                        },
                        new
                        {
                            Id = new Guid("0ff3e008-e7b4-4d15-b430-4ba8763a1bfd"),
                            CategoryID = new Guid("175d4c8d-d2f0-441b-85cb-45a1cb0b6756"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(123),
                            IsDelete = false,
                            Price = 10000.0,
                            ProductDescription = "Kẹo sô cô la ngọt thanh",
                            ProductName = "Kẹo Socola",
                            Stock = 1000
                        },
                        new
                        {
                            Id = new Guid("ae08dfac-8057-421a-b5ae-4f0be7956cb0"),
                            CategoryID = new Guid("175d4c8d-d2f0-441b-85cb-45a1cb0b6756"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(127),
                            IsDelete = false,
                            Price = 15000.0,
                            ProductDescription = "Kẹo dâu tây thơm ngon",
                            ProductName = "Kẹo dâu",
                            Stock = 800
                        },
                        new
                        {
                            Id = new Guid("1211ffaa-19e2-4828-adf0-3d86d4f0edb3"),
                            CategoryID = new Guid("9afcdfac-1a27-496b-84e5-0c8e5804e40e"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(130),
                            IsDelete = false,
                            Price = 50000.0,
                            ProductDescription = "Gà rán giòn tan thơm ngon",
                            ProductName = "Gà rán",
                            Stock = 500
                        },
                        new
                        {
                            Id = new Guid("d828068a-224c-4fca-aff4-50e430cfd956"),
                            CategoryID = new Guid("9afcdfac-1a27-496b-84e5-0c8e5804e40e"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(135),
                            IsDelete = false,
                            Price = 65000.0,
                            ProductDescription = "Cá chiên giòn rụm",
                            ProductName = "Cá chiên",
                            Stock = 300
                        },
                        new
                        {
                            Id = new Guid("4af8804c-6bb1-4c63-9b8c-f5e55aa8e656"),
                            CategoryID = new Guid("175d4c8d-d2f0-441b-85cb-45a1cb0b6756"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(193),
                            IsDelete = false,
                            Price = 5000.0,
                            ProductDescription = "Kẹo bạc hà mát lạnh",
                            ProductName = "Kẹo bạc hà",
                            Stock = 1200
                        },
                        new
                        {
                            Id = new Guid("ecc1a85e-b4c6-4dbb-9c9e-162083ff1b81"),
                            CategoryID = new Guid("175d4c8d-d2f0-441b-85cb-45a1cb0b6756"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(196),
                            IsDelete = false,
                            Price = 2500.0,
                            ProductDescription = "Kẹo mút mềm dẻo",
                            ProductName = "Kẹo mút",
                            Stock = 2000
                        },
                        new
                        {
                            Id = new Guid("f86a8a73-d360-460e-95d0-b1595394c587"),
                            CategoryID = new Guid("9afcdfac-1a27-496b-84e5-0c8e5804e40e"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(199),
                            IsDelete = false,
                            Price = 80000.0,
                            ProductDescription = "Gà nướng thơm phức",
                            ProductName = "Gà nướng",
                            Stock = 800
                        },
                        new
                        {
                            Id = new Guid("f9b32052-637c-4179-a8eb-a6dda0ee090c"),
                            CategoryID = new Guid("9afcdfac-1a27-496b-84e5-0c8e5804e40e"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(204),
                            IsDelete = false,
                            Price = 25000.0,
                            ProductDescription = "Cơm chiên dương châu thơm ngon",
                            ProductName = "Cơm chiên dương châu",
                            Stock = 1000
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Routes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ea675490-eecd-4308-bb71-61b72a9c979f"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(451),
                            FromLocation = "Quận 1, Tp.Hcm",
                            IsDelete = false,
                            ToLocation = "Quận 9, Tp.Hcm"
                        },
                        new
                        {
                            Id = new Guid("001a254c-02d4-40e7-a01f-95f393fb41ef"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(455),
                            FromLocation = "Quận 1, Tp.Hcm",
                            IsDelete = false,
                            ToLocation = "Suối Tiên, Đồng Nai"
                        },
                        new
                        {
                            Id = new Guid("a437b242-55fc-4146-a2b9-8c952b107e3a"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(457),
                            FromLocation = "Quận 1, Tp.Hcm",
                            IsDelete = false,
                            ToLocation = "Quận Thủ Đức, Tp.Hcm"
                        },
                        new
                        {
                            Id = new Guid("ccc66514-0597-4d43-aaff-0c5d8ee59ffa"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(459),
                            FromLocation = "Quận 1, Tp.Hcm",
                            IsDelete = false,
                            ToLocation = "Quận Bình Thạnh, Tp.Hcm"
                        },
                        new
                        {
                            Id = new Guid("b9f8f712-92ee-4611-ad55-000a8e1b84c6"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(461),
                            FromLocation = "Quận 1, Tp.Hcm",
                            IsDelete = false,
                            ToLocation = "Bến xe Miền Đông"
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Route_Station", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RouteID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StationID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RouteID");

                    b.HasIndex("StationID");

                    b.ToTable("Route_Stations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c4"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(330),
                            IsDelete = false,
                            RouteID = new Guid("ea675490-eecd-4308-bb71-61b72a9c979f"),
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c4")
                        },
                        new
                        {
                            Id = new Guid("1b22bdb7-1688-42fa-8fae-4af92e32df7f"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(335),
                            IsDelete = false,
                            RouteID = new Guid("ccc66514-0597-4d43-aaff-0c5d8ee59ffa"),
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c4")
                        },
                        new
                        {
                            Id = new Guid("2ff9d0d9-474c-4466-b9a8-707b730f415c"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(338),
                            IsDelete = false,
                            RouteID = new Guid("a437b242-55fc-4146-a2b9-8c952b107e3a"),
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c4")
                        },
                        new
                        {
                            Id = new Guid("ab2099b4-e511-42ff-9e6a-ee71bddcd482"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(341),
                            IsDelete = false,
                            RouteID = new Guid("001a254c-02d4-40e7-a01f-95f393fb41ef"),
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c4")
                        },
                        new
                        {
                            Id = new Guid("6a82db5a-23cf-4764-b7d1-ccabce5cc317"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(343),
                            IsDelete = false,
                            RouteID = new Guid("b9f8f712-92ee-4611-ad55-000a8e1b84c6"),
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c4")
                        },
                        new
                        {
                            Id = new Guid("5004477e-1446-467d-8157-972185d64290"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(346),
                            IsDelete = false,
                            RouteID = new Guid("ccc66514-0597-4d43-aaff-0c5d8ee59ffa"),
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c5")
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Station", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StoreID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StoreID");

                    b.ToTable("Stations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c4"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(790),
                            IsDelete = false,
                            StationName = "Ga Metro Bến Thành",
                            StoreID = new Guid("aa2610a8-de94-42b7-b12b-1cf8710e05d8")
                        },
                        new
                        {
                            Id = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c5"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(794),
                            IsDelete = false,
                            StationName = "Ga Metro Vincom Bình Thạnh",
                            StoreID = new Guid("aa2610a8-de94-42b7-b12b-1cf8710e05d8")
                        },
                        new
                        {
                            Id = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c6"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(796),
                            IsDelete = false,
                            StationName = "Ga Metro Chợ Thủ Đức",
                            StoreID = new Guid("aa2610a8-de94-42b7-b12b-1cf8710e05d8")
                        },
                        new
                        {
                            Id = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c7"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(801),
                            IsDelete = false,
                            StationName = "Ga Metro Khu Công Nghệ Cao",
                            StoreID = new Guid("aa2610a8-de94-42b7-b12b-1cf8710e05d8")
                        },
                        new
                        {
                            Id = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c8"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(804),
                            IsDelete = false,
                            StationName = "Ga Metro Suối Tiên",
                            StoreID = new Guid("aa2610a8-de94-42b7-b12b-1cf8710e05d8")
                        },
                        new
                        {
                            Id = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c9"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(806),
                            IsDelete = false,
                            StationName = "Ga Metro Bến xe Miền Đông",
                            StoreID = new Guid("aa2610a8-de94-42b7-b12b-1cf8710e05d8")
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("StoreCloseTime")
                        .HasColumnType("time");

                    b.Property<string>("StoreLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("StoreOpenTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aa2610a8-de94-42b7-b12b-1cf8710e05d8"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(1059),
                            IsDelete = false,
                            StoreCloseTime = new TimeSpan(0, 23, 0, 0, 0),
                            StoreLocation = "Số 2, Đường Lê Lai, Quận 1",
                            StoreName = "Metro PickUp 1",
                            StoreOpenTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("d3599df7-877e-41c7-832d-14850e5c88bd"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(1264),
                            IsDelete = false,
                            StoreCloseTime = new TimeSpan(0, 6, 0, 0, 0),
                            StoreLocation = "Số 3, Vincom, Quận Bình Thạnh",
                            StoreName = "Metro PickUp 2",
                            StoreOpenTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("2f3eee35-1b8e-43af-956f-eacd94eea7cd"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(1270),
                            IsDelete = false,
                            StoreCloseTime = new TimeSpan(0, 6, 0, 0, 0),
                            StoreLocation = "Số 1, Võ Văn Ngân, Thành Phố Thủ Đức",
                            StoreName = "Metro PickUp 3",
                            StoreOpenTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("70c6a937-f285-4495-8407-b20a0c9b10f3"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(1276),
                            IsDelete = false,
                            StoreCloseTime = new TimeSpan(0, 6, 0, 0, 0),
                            StoreLocation = "Khu Công Nghệ Cao Thành Phố Thủ Đức ",
                            StoreName = "Metro PickUp 4",
                            StoreOpenTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("ef443e4b-886c-4c06-8528-51e9cf623867"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(1281),
                            IsDelete = false,
                            StoreCloseTime = new TimeSpan(0, 6, 0, 0, 0),
                            StoreLocation = "Suối tiên",
                            StoreName = "Metro PickUp 5",
                            StoreOpenTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("6507b7db-7255-4274-87a4-6e2dc3d8a3c4"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(1289),
                            IsDelete = false,
                            StoreCloseTime = new TimeSpan(0, 6, 0, 0, 0),
                            StoreLocation = "Bến Xe Miền Đông",
                            StoreName = "Metro PickUp 6",
                            StoreOpenTime = new TimeSpan(0, 6, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Trip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TripEndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TripName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TripStartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Trips");

                    b.HasData(
                        new
                        {
                            Id = new Guid("823ad122-7b51-4dab-9d37-b0f238d4a2ff"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(1649),
                            IsDelete = false,
                            TripEndTime = new DateTime(2023, 7, 17, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TripName = "Camping Trip",
                            TripStartTime = new DateTime(2023, 7, 15, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9c2ab923-4c57-44d7-9c1a-b44c0d3e6b00"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(1746),
                            IsDelete = false,
                            TripEndTime = new DateTime(2023, 5, 25, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            TripName = "Road Trip",
                            TripStartTime = new DateTime(2023, 5, 20, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("02859382-d88c-4e69-8c47-b8e0456677d5"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(1758),
                            IsDelete = false,
                            TripEndTime = new DateTime(2023, 9, 15, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            TripName = "Cruise Vacation",
                            TripStartTime = new DateTime(2023, 9, 10, 15, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("27421cac-1da7-4df8-9928-7fb636ca42aa"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(1771),
                            IsDelete = false,
                            TripEndTime = new DateTime(2023, 11, 14, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            TripName = "Hiking Adventure",
                            TripStartTime = new DateTime(2023, 11, 12, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5b30c4e9-31ab-456c-b212-dc6b2ba9a3e7"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(1781),
                            IsDelete = false,
                            TripEndTime = new DateTime(2023, 12, 23, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            TripName = "Ski Getaway",
                            TripStartTime = new DateTime(2023, 12, 20, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9b4d232c-0fda-4ec0-beed-ecd649ee9c52"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(1791),
                            IsDelete = false,
                            TripEndTime = new DateTime(2023, 8, 18, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            TripName = "Tropical Vacation",
                            TripStartTime = new DateTime(2023, 8, 13, 11, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("bf736039-33e9-466f-ac4e-78c89f3317e6"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(1801),
                            IsDelete = false,
                            TripEndTime = new DateTime(2023, 7, 6, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            TripName = "Amusement Park Fun",
                            TripStartTime = new DateTime(2023, 7, 4, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8a2ba7d5-7019-49c6-a47d-ab0a072e7932"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(1812),
                            IsDelete = false,
                            TripEndTime = new DateTime(2023, 10, 3, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            TripName = "African Safari",
                            TripStartTime = new DateTime(2023, 9, 28, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d9852f0d-e836-4a6e-94f4-d229b297933d"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(1822),
                            IsDelete = false,
                            TripEndTime = new DateTime(2023, 5, 8, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            TripName = "Botanical Gardens Tour",
                            TripStartTime = new DateTime(2023, 5, 6, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Trip_Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RouteID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TripID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RouteID");

                    b.HasIndex("TripID");

                    b.ToTable("Trip_Routes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("172c5041-1089-4602-acb4-ef1d606baaeb"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(1532),
                            IsDelete = false,
                            RouteID = new Guid("001a254c-02d4-40e7-a01f-95f393fb41ef"),
                            TripID = new Guid("823ad122-7b51-4dab-9d37-b0f238d4a2ff")
                        },
                        new
                        {
                            Id = new Guid("923cb249-bc18-4411-96cf-ed6145ddd55b"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(1538),
                            IsDelete = false,
                            RouteID = new Guid("a437b242-55fc-4146-a2b9-8c952b107e3a"),
                            TripID = new Guid("02859382-d88c-4e69-8c47-b8e0456677d5")
                        },
                        new
                        {
                            Id = new Guid("1d08933e-d62a-4295-9ca6-6da04644b8c7"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(1540),
                            IsDelete = false,
                            RouteID = new Guid("ccc66514-0597-4d43-aaff-0c5d8ee59ffa"),
                            TripID = new Guid("27421cac-1da7-4df8-9928-7fb636ca42aa")
                        },
                        new
                        {
                            Id = new Guid("b5fc164a-8ca5-4b68-a166-34b52babf1e2"),
                            Created = new DateTime(2023, 10, 1, 1, 44, 43, 80, DateTimeKind.Local).AddTicks(1542),
                            IsDelete = false,
                            RouteID = new Guid("b9f8f712-92ee-4611-ad55-000a8e1b84c6"),
                            TripID = new Guid("5b30c4e9-31ab-456c-b212-dc6b2ba9a3e7")
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.WithDraw", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("WithDraws");
                });

            modelBuilder.Entity("MetroDelivery.Domain.IdentityModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2198E4CD-3305-49C5-B78A-0B54DD76898F",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5527421e-726a-44d5-becb-5c707b4d5abb",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nhan",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHiFHyGpZDjaHE0QZ/kVcW5hrpuvvP3fLbvfjhnD4qSQPqJL5q/3xBAGDDXrYDAeLw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c9a567f8-9293-4d5f-8bb4-781c18a9f77c",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "E6DE8827-B7C2-46E9-9227-66E6ECE676A8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "251ed522-b4e9-4a98-8382-8e12efd1998c",
                            Email = "enduser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Vi",
                            LastName = "EndUser",
                            LockoutEnabled = false,
                            NormalizedEmail = "ENDUSER@GMAIL.COM",
                            NormalizedUserName = "ENDUSER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAED4fyzViVv9zqVHVLStlHhHAGAz+cFGFpTZale0xRbyY9cwzxuvkBiN6M8UMaPgchQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "19256012-0ea8-4e97-8a60-53e9d118e39b",
                            TwoFactorEnabled = false,
                            UserName = "enduser@gmail.com"
                        },
                        new
                        {
                            Id = "2C0B43BB-B991-408E-A8F3-2FD3B4A2AB84",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ba8aed4-f84f-4820-bad3-75aad1be420d",
                            Email = "staff@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Vi",
                            LastName = "Staff",
                            LockoutEnabled = false,
                            NormalizedEmail = "STAFF@GMAIL.COM",
                            NormalizedUserName = "STAFF@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFKuP7Xo4HBPB9+rAU/ki7OSffH5Mpc9estQRk51do2lvQDD90oEyAzP9vVRxMFc1A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5f2fe07c-426d-4e2a-b2a1-db92d205393b",
                            TwoFactorEnabled = false,
                            UserName = "staff@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "CF531396-C1CD-427B-9D17-0383B7675394",
                            ConcurrencyStamp = "8bfbffcc-9223-4ab0-841a-915c4e7dd992",
                            Name = "EndUser",
                            NormalizedName = "EndUser"
                        },
                        new
                        {
                            Id = "AF5EB4AC-219A-4BC1-99FE-8C23876536EA",
                            ConcurrencyStamp = "4e8411ab-787c-4ebb-866d-2a0c901e74eb",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "647D9649-F5A2-4F24-808F-6FC326EC2AA3",
                            ConcurrencyStamp = "a12825c8-b3d1-405f-af70-a7ba01d8fd78",
                            Name = "Staff",
                            NormalizedName = "Staff"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2C0B43BB-B991-408E-A8F3-2FD3B4A2AB84",
                            RoleId = "647D9649-F5A2-4F24-808F-6FC326EC2AA3"
                        },
                        new
                        {
                            UserId = "E6DE8827-B7C2-46E9-9227-66E6ECE676A8",
                            RoleId = "CF531396-C1CD-427B-9D17-0383B7675394"
                        },
                        new
                        {
                            UserId = "2198E4CD-3305-49C5-B78A-0B54DD76898F",
                            RoleId = "AF5EB4AC-219A-4BC1-99FE-8C23876536EA"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Customer", b =>
                {
                    b.HasOne("MetroDelivery.Domain.IdentityModels.ApplicationUser", "ApplicationUser")
                        .WithOne("Customer")
                        .HasForeignKey("MetroDelivery.Domain.Entities.Customer", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Menu", b =>
                {
                    b.HasOne("MetroDelivery.Domain.Entities.Store", "Store")
                        .WithMany("Menus")
                        .HasForeignKey("StoreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Menu_Product", b =>
                {
                    b.HasOne("MetroDelivery.Domain.Entities.Menu", "Menu")
                        .WithMany("Menu_Products")
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroDelivery.Domain.Entities.Product", "Products")
                        .WithMany("Menu_Products")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Order", b =>
                {
                    b.HasOne("MetroDelivery.Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroDelivery.Domain.Entities.Store", "Store")
                        .WithMany("Orders")
                        .HasForeignKey("StoreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroDelivery.Domain.Entities.Trip", "Trip")
                        .WithMany("Order")
                        .HasForeignKey("TripID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Store");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("MetroDelivery.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetail")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroDelivery.Domain.Entities.Product", "Products")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.PaymentMethod", b =>
                {
                    b.HasOne("MetroDelivery.Domain.Entities.Order", "Order")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Product", b =>
                {
                    b.HasOne("MetroDelivery.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Route_Station", b =>
                {
                    b.HasOne("MetroDelivery.Domain.Entities.Route", "Route")
                        .WithMany("Route_Stations")
                        .HasForeignKey("RouteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroDelivery.Domain.Entities.Station", "Station")
                        .WithMany("Route_Stations")
                        .HasForeignKey("StationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Station", b =>
                {
                    b.HasOne("MetroDelivery.Domain.Entities.Store", "Store")
                        .WithMany("Stations")
                        .HasForeignKey("StoreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Trip_Route", b =>
                {
                    b.HasOne("MetroDelivery.Domain.Entities.Route", "Route")
                        .WithMany("Trip_Routes")
                        .HasForeignKey("RouteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroDelivery.Domain.Entities.Trip", "Trip")
                        .WithMany("Trip_Routes")
                        .HasForeignKey("TripID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.WithDraw", b =>
                {
                    b.HasOne("MetroDelivery.Domain.Entities.Customer", "Customer")
                        .WithMany("WithDraws")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MetroDelivery.Domain.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MetroDelivery.Domain.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroDelivery.Domain.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MetroDelivery.Domain.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("WithDraws");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Menu", b =>
                {
                    b.Navigation("Menu_Products");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetail");

                    b.Navigation("PaymentMethods");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Product", b =>
                {
                    b.Navigation("Menu_Products");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Route", b =>
                {
                    b.Navigation("Route_Stations");

                    b.Navigation("Trip_Routes");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Station", b =>
                {
                    b.Navigation("Route_Stations");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Store", b =>
                {
                    b.Navigation("Menus");

                    b.Navigation("Orders");

                    b.Navigation("Stations");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Trip", b =>
                {
                    b.Navigation("Order");

                    b.Navigation("Trip_Routes");
                });

            modelBuilder.Entity("MetroDelivery.Domain.IdentityModels.ApplicationUser", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
