// <auto-generated />
using System;
using MetroDelivery.Identity.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MetroDelivery.Identity.Migrations
{
    [DbContext(typeof(MetroPickupIdentityDbContext))]
    [Migration("20231015090544_Addmordatabase")]
    partial class Addmordatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9afcdfac-1a27-496b-84e5-0c8e5804e40e"),
                            CategoryName = "Food",
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(6642),
                            IsDelete = false
                        },
                        new
                        {
                            Id = new Guid("4078ef19-ba53-481d-9c5a-1c37dfe0e0dc"),
                            CategoryName = "Beverages",
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(6666),
                            IsDelete = false
                        },
                        new
                        {
                            Id = new Guid("b7a3a853-73c6-4f02-913b-9765019e9bd0"),
                            CategoryName = "Bread",
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(6669),
                            IsDelete = false
                        },
                        new
                        {
                            Id = new Guid("175d4c8d-d2f0-441b-85cb-45a1cb0b6756"),
                            CategoryName = "Candy",
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(6671),
                            IsDelete = false
                        },
                        new
                        {
                            Id = new Guid("8908ea98-b421-420b-9634-03ed356bb921"),
                            CategoryName = "Chips",
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(6673),
                            IsDelete = false
                        },
                        new
                        {
                            Id = new Guid("9b2cccb2-f5fa-4358-8265-0fe4f7a52253"),
                            CategoryName = "Cookies",
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(6675),
                            IsDelete = false
                        },
                        new
                        {
                            Id = new Guid("39696f0c-2c8a-480f-b917-141b7da708e4"),
                            CategoryName = "Dairy",
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(6676),
                            IsDelete = false
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f9589c1a-3cbc-4215-bb84-b8fa7d719440"),
                            Address = "da nang",
                            ApplicationUserId = "2C0B43BB-B991-408E-A8F3-2FD3B4A2AB84",
                            Birthday = new DateTime(2002, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(9977),
                            IsDelete = false,
                            Phone = "03030303"
                        },
                        new
                        {
                            Id = new Guid("b9cf3487-3d04-4cbf-85b7-e33360566485"),
                            Address = "hcm",
                            ApplicationUserId = "2198E4CD-3305-49C5-B78A-0B54DD76898F",
                            Birthday = new DateTime(2010, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 247, DateTimeKind.Local).AddTicks(14),
                            IsDelete = false,
                            Phone = "03030303"
                        },
                        new
                        {
                            Id = new Guid("0512a248-0054-4616-ade5-ae412f4f07bd"),
                            Address = "Cần Thơ",
                            ApplicationUserId = "C4EE82A1-DB88-49A6-81A8-4B9521FF01F9",
                            Birthday = new DateTime(2002, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 247, DateTimeKind.Local).AddTicks(20),
                            IsDelete = false,
                            Phone = "0961868641"
                        },
                        new
                        {
                            Id = new Guid("ecf95bf5-d766-4b6e-94a7-d33ea29c0618"),
                            Address = "Đắk Lắk",
                            ApplicationUserId = "1F11BA64-2870-43F7-BB03-867112867F25",
                            Birthday = new DateTime(1899, 8, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 247, DateTimeKind.Local).AddTicks(24),
                            IsDelete = false,
                            Phone = "0903182861"
                        },
                        new
                        {
                            Id = new Guid("01d31c40-14c9-444c-a2fe-f58ea0fbc08a"),
                            Address = "Gia Lai",
                            ApplicationUserId = "2E089AF6-3437-4DD6-9956-BB792E783AFB",
                            Birthday = new DateTime(1998, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 247, DateTimeKind.Local).AddTicks(32),
                            IsDelete = false,
                            Phone = "0914009910"
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTimeService")
                        .HasColumnType("time");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("StartTimeService")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Menu");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e7a15238-5db0-49bd-94e6-d5f8b77ae6ce"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7083),
                            EndTimeService = new TimeSpan(0, 8, 0, 0, 0),
                            IsDelete = false,
                            StartTimeService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("5263453c-dae9-45e4-8204-5430a7256cde"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7130),
                            EndTimeService = new TimeSpan(0, 11, 0, 0, 0),
                            IsDelete = false,
                            StartTimeService = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("9b08173a-e338-45ef-b479-6b0e95f2b055"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7136),
                            EndTimeService = new TimeSpan(0, 13, 0, 0, 0),
                            IsDelete = false,
                            StartTimeService = new TimeSpan(0, 11, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("47a91dd5-f999-461a-8f80-935d169ca0c3"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7141),
                            EndTimeService = new TimeSpan(0, 17, 0, 0, 0),
                            IsDelete = false,
                            StartTimeService = new TimeSpan(0, 13, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("d6184ea2-9833-499f-9a56-8138c3b60c78"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7146),
                            EndTimeService = new TimeSpan(0, 20, 0, 0, 0),
                            IsDelete = false,
                            StartTimeService = new TimeSpan(0, 17, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("bbc7d071-5f5b-40be-b25e-3aa07a6c3e7c"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7151),
                            EndTimeService = new TimeSpan(0, 0, 0, 0, 0),
                            IsDelete = false,
                            StartTimeService = new TimeSpan(0, 20, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("4cbf8910-c204-46fe-91d4-e8e4c94ff695"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7160),
                            EndTimeService = new TimeSpan(0, 5, 0, 0, 0),
                            IsDelete = false,
                            StartTimeService = new TimeSpan(0, 1, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Menu_Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MenuID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("PriceOfProductBelongToTimeService")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MenuID");

                    b.HasIndex("ProductID");

                    b.ToTable("Menu_Product");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f754627-2730-4c37-8074-a8db5b1e9432"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(6835),
                            IsDelete = false,
                            MenuID = new Guid("e7a15238-5db0-49bd-94e6-d5f8b77ae6ce"),
                            PriceOfProductBelongToTimeService = 20000.0,
                            ProductID = new Guid("43203ce4-d82c-4c78-8794-2aef22d7ec5b")
                        },
                        new
                        {
                            Id = new Guid("5916f9ab-5878-459d-a65e-20ff50685c8b"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(6841),
                            IsDelete = false,
                            MenuID = new Guid("e7a15238-5db0-49bd-94e6-d5f8b77ae6ce"),
                            PriceOfProductBelongToTimeService = 15000.0,
                            ProductID = new Guid("e802b6c5-f08e-4eff-b7e7-af95514b4341")
                        },
                        new
                        {
                            Id = new Guid("d36d294f-92b6-404a-ba84-b4a1a68de6ee"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(6844),
                            IsDelete = false,
                            MenuID = new Guid("5263453c-dae9-45e4-8204-5430a7256cde"),
                            PriceOfProductBelongToTimeService = 1000.0,
                            ProductID = new Guid("ffb05663-954d-4af3-8a41-91af39446f81")
                        },
                        new
                        {
                            Id = new Guid("6028f98f-5c64-481d-b32b-80c395196e47"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(6847),
                            IsDelete = false,
                            MenuID = new Guid("5263453c-dae9-45e4-8204-5430a7256cde"),
                            PriceOfProductBelongToTimeService = 30000.0,
                            ProductID = new Guid("f31c789c-4a46-45c7-9009-d36681d788c5")
                        },
                        new
                        {
                            Id = new Guid("d166c404-6bcd-4c4d-b8a4-211816745655"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(6849),
                            IsDelete = false,
                            MenuID = new Guid("9b08173a-e338-45ef-b479-6b0e95f2b055"),
                            PriceOfProductBelongToTimeService = 50000.0,
                            ProductID = new Guid("107f1f75-b23b-4bc4-92d7-f2e90d067d1f")
                        },
                        new
                        {
                            Id = new Guid("816dcefd-7389-4d84-b968-21a4697a10e7"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(6852),
                            IsDelete = false,
                            MenuID = new Guid("9b08173a-e338-45ef-b479-6b0e95f2b055"),
                            PriceOfProductBelongToTimeService = 35000.0,
                            ProductID = new Guid("1616cc05-8c82-4f8b-a6e0-f60ab3de0d38")
                        },
                        new
                        {
                            Id = new Guid("40b8bdd2-289b-481e-9064-1b030b02fc4e"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(6941),
                            IsDelete = false,
                            MenuID = new Guid("9b08173a-e338-45ef-b479-6b0e95f2b055"),
                            PriceOfProductBelongToTimeService = 35000.0,
                            ProductID = new Guid("43203ce4-d82c-4c78-8794-2aef22d7ec5b")
                        },
                        new
                        {
                            Id = new Guid("984d11da-b11d-4a3b-ae8b-a72e0c7e50cd"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(6944),
                            IsDelete = false,
                            MenuID = new Guid("d6184ea2-9833-499f-9a56-8138c3b60c78"),
                            PriceOfProductBelongToTimeService = 159000.0,
                            ProductID = new Guid("4c9ec4b9-1c16-4c7a-90bf-d620aab257b6")
                        },
                        new
                        {
                            Id = new Guid("c6619c5b-8da3-4fb8-a5b7-58ee1977fa55"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(6948),
                            IsDelete = false,
                            MenuID = new Guid("d6184ea2-9833-499f-9a56-8138c3b60c78"),
                            PriceOfProductBelongToTimeService = 100000.0,
                            ProductID = new Guid("0c308b93-b26a-4224-9d63-28294711aa15")
                        },
                        new
                        {
                            Id = new Guid("730f8109-1030-4b96-bf6e-970663f203f2"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(6951),
                            IsDelete = false,
                            MenuID = new Guid("d6184ea2-9833-499f-9a56-8138c3b60c78"),
                            PriceOfProductBelongToTimeService = 25000.0,
                            ProductID = new Guid("b834cf11-cc28-4e7d-9846-2acc8ad33d8c")
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderTokenQR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StoreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<Guid>("TripID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StoreID");

                    b.HasIndex("TripID");

                    b.ToTable("Order");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a8af2f67-447f-4f70-b660-4dd08fa47d4d"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7284),
                            CustomerID = new Guid("0512a248-0054-4616-ade5-ae412f4f07bd"),
                            IsDelete = false,
                            OrderTokenQR = "1231212QR",
                            StoreID = new Guid("ef443e4b-886c-4c06-8528-51e9cf623867"),
                            TotalPrice = 0.0,
                            TripID = new Guid("823ad122-7b51-4dab-9d37-b0f238d4a2ff")
                        },
                        new
                        {
                            Id = new Guid("d68ee4e5-980e-4ec7-8060-df214d458c79"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7291),
                            CustomerID = new Guid("ecf95bf5-d766-4b6e-94a7-d33ea29c0618"),
                            IsDelete = false,
                            OrderTokenQR = "11789212QR",
                            StoreID = new Guid("aa2610a8-de94-42b7-b12b-1cf8710e05d8"),
                            TotalPrice = 0.0,
                            TripID = new Guid("9c2ab923-4c57-44d7-9c1a-b44c0d3e6b00")
                        },
                        new
                        {
                            Id = new Guid("814860c5-ab72-4605-bb47-7e78c78d6fb0"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7295),
                            CustomerID = new Guid("01d31c40-14c9-444c-a2fe-f58ea0fbc08a"),
                            IsDelete = false,
                            OrderTokenQR = "1231212QR",
                            StoreID = new Guid("d3599df7-877e-41c7-832d-14850e5c88bd"),
                            TotalPrice = 0.0,
                            TripID = new Guid("27421cac-1da7-4df8-9928-7fb636ca42aa")
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quanity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderDetail");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f6d015a9-d5bb-40e8-a287-623f0af19fc9"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7422),
                            IsDelete = false,
                            OrderID = new Guid("a8af2f67-447f-4f70-b660-4dd08fa47d4d"),
                            Price = 60000.0,
                            ProductID = new Guid("e802b6c5-f08e-4eff-b7e7-af95514b4341"),
                            Quanity = 2
                        },
                        new
                        {
                            Id = new Guid("a8b7026d-5def-44ef-9666-6b78682a77cc"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7428),
                            IsDelete = false,
                            OrderID = new Guid("d68ee4e5-980e-4ec7-8060-df214d458c79"),
                            Price = 30000.0,
                            ProductID = new Guid("43203ce4-d82c-4c78-8794-2aef22d7ec5b"),
                            Quanity = 1
                        },
                        new
                        {
                            Id = new Guid("05a027a2-01b0-40d2-91f7-2a33fc29753f"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7431),
                            IsDelete = false,
                            OrderID = new Guid("814860c5-ab72-4605-bb47-7e78c78d6fb0"),
                            Price = 125000.0,
                            ProductID = new Guid("4c9ec4b9-1c16-4c7a-90bf-d620aab257b6"),
                            Quanity = 1
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod");

                    b.HasData(
                        new
                        {
                            Id = new Guid("71b4bf27-e569-47a0-b16a-e484533bd9f2"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7538),
                            IsDelete = false,
                            PaymentMethodName = "thanh toán tiền mặt"
                        },
                        new
                        {
                            Id = new Guid("7db43916-e061-42cb-b0a7-9734423d00cd"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7545),
                            IsDelete = false,
                            PaymentMethodName = "thanh toán ngân hàng"
                        },
                        new
                        {
                            Id = new Guid("47bd4dd4-3fb4-463e-b9b9-5ebfb7e1f960"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7547),
                            IsDelete = false,
                            PaymentMethodName = "thanh toán qua momo"
                        },
                        new
                        {
                            Id = new Guid("36672051-5437-4d2c-a42e-c71a9b67a2b1"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7549),
                            IsDelete = false,
                            PaymentMethodName = "thanh toán trên app MetroPickUp"
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryID");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = new Guid("45da4260-ba13-489b-995a-1f6adb13ab75"),
                            CategoryID = new Guid("175d4c8d-d2f0-441b-85cb-45a1cb0b6756"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7708),
                            IsDelete = false,
                            Price = 5000.5,
                            ProductDescription = "Kẹo thơm ngon được tạo ra từ các loại đường, được làm nóng và tạo nên hương vị ngọt ngào",
                            ProductName = "Keo bông gòn"
                        },
                        new
                        {
                            Id = new Guid("7d661a30-e180-498c-9a77-cb6112a7cb22"),
                            CategoryID = new Guid("175d4c8d-d2f0-441b-85cb-45a1cb0b6756"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7713),
                            IsDelete = false,
                            Price = 3000.0,
                            ProductDescription = "Kẹo lạc thơm ngon, giòn tan",
                            ProductName = "Kẹo lạc"
                        },
                        new
                        {
                            Id = new Guid("7da34092-5747-42b7-b059-4a5aad57e740"),
                            CategoryID = new Guid("175d4c8d-d2f0-441b-85cb-45a1cb0b6756"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7717),
                            IsDelete = false,
                            Price = 3000.0,
                            ProductDescription = "Kẹo lạc thơm ngon, giòn tan",
                            ProductName = "Kẹo chup"
                        },
                        new
                        {
                            Id = new Guid("b834cf11-cc28-4e7d-9846-2acc8ad33d8c"),
                            CategoryID = new Guid("8908ea98-b421-420b-9634-03ed356bb921"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7719),
                            IsDelete = false,
                            Price = 10000.0,
                            ProductDescription = "Khoai tây chiên giòn tan",
                            ProductName = "Khoai tây chiên"
                        },
                        new
                        {
                            Id = new Guid("6d60bf44-b775-4d87-bb47-aace85d49ac4"),
                            CategoryID = new Guid("175d4c8d-d2f0-441b-85cb-45a1cb0b6756"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7724),
                            IsDelete = false,
                            Price = 2500.0,
                            ProductDescription = "Kẹo dẻo mềm, đàn hồi",
                            ProductName = "Kẹo dẻo"
                        },
                        new
                        {
                            Id = new Guid("1616cc05-8c82-4f8b-a6e0-f60ab3de0d38"),
                            CategoryID = new Guid("9afcdfac-1a27-496b-84e5-0c8e5804e40e"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7729),
                            IsDelete = false,
                            Price = 30000.0,
                            ProductDescription = "Cơm gà xé thơm ngon",
                            ProductName = "Cơm gà xé"
                        },
                        new
                        {
                            Id = new Guid("d4fe048d-ff12-4715-93e7-3250f49c15c8"),
                            CategoryID = new Guid("9b2cccb2-f5fa-4358-8265-0fe4f7a52253"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7733),
                            IsDelete = false,
                            Price = 5000.0,
                            ProductDescription = "Bánh quy giòn tan trong miệng",
                            ProductName = "Bánh quy giòn"
                        },
                        new
                        {
                            Id = new Guid("f31c789c-4a46-45c7-9009-d36681d788c5"),
                            CategoryID = new Guid("175d4c8d-d2f0-441b-85cb-45a1cb0b6756"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7736),
                            IsDelete = false,
                            Price = 10000.0,
                            ProductDescription = "Kẹo sô cô la ngọt thanh",
                            ProductName = "Kẹo Socola"
                        },
                        new
                        {
                            Id = new Guid("4ecd72e3-f43d-490f-8b46-8e92ea29f85c"),
                            CategoryID = new Guid("175d4c8d-d2f0-441b-85cb-45a1cb0b6756"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7740),
                            IsDelete = false,
                            Price = 15000.0,
                            ProductDescription = "Kẹo dâu tây thơm ngon",
                            ProductName = "Kẹo dâu"
                        },
                        new
                        {
                            Id = new Guid("0c308b93-b26a-4224-9d63-28294711aa15"),
                            CategoryID = new Guid("9afcdfac-1a27-496b-84e5-0c8e5804e40e"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7745),
                            IsDelete = false,
                            Price = 50000.0,
                            ProductDescription = "Gà rán giòn tan thơm ngon",
                            ProductName = "Gà rán"
                        },
                        new
                        {
                            Id = new Guid("107f1f75-b23b-4bc4-92d7-f2e90d067d1f"),
                            CategoryID = new Guid("9afcdfac-1a27-496b-84e5-0c8e5804e40e"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7748),
                            IsDelete = false,
                            Price = 65000.0,
                            ProductDescription = "Cá chiên giòn rụm",
                            ProductName = "Cá chiên"
                        },
                        new
                        {
                            Id = new Guid("55265d3b-fa02-4e09-84db-d4e8c8a9a9b5"),
                            CategoryID = new Guid("175d4c8d-d2f0-441b-85cb-45a1cb0b6756"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7751),
                            IsDelete = false,
                            Price = 5000.0,
                            ProductDescription = "Kẹo bạc hà mát lạnh",
                            ProductName = "Kẹo bạc hà"
                        },
                        new
                        {
                            Id = new Guid("ffb05663-954d-4af3-8a41-91af39446f81"),
                            CategoryID = new Guid("175d4c8d-d2f0-441b-85cb-45a1cb0b6756"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7755),
                            IsDelete = false,
                            Price = 2500.0,
                            ProductDescription = "Kẹo mút mềm dẻo",
                            ProductName = "Kẹo mút"
                        },
                        new
                        {
                            Id = new Guid("4c9ec4b9-1c16-4c7a-90bf-d620aab257b6"),
                            CategoryID = new Guid("9afcdfac-1a27-496b-84e5-0c8e5804e40e"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7760),
                            IsDelete = false,
                            Price = 80000.0,
                            ProductDescription = "Gà nướng thơm phức",
                            ProductName = "Gà nướng"
                        },
                        new
                        {
                            Id = new Guid("43203ce4-d82c-4c78-8794-2aef22d7ec5b"),
                            CategoryID = new Guid("9afcdfac-1a27-496b-84e5-0c8e5804e40e"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7762),
                            IsDelete = false,
                            Price = 25000.0,
                            ProductDescription = "Cơm chiên dương châu thơm ngon",
                            ProductName = "Cơm chiên dương châu"
                        },
                        new
                        {
                            Id = new Guid("e802b6c5-f08e-4eff-b7e7-af95514b4341"),
                            CategoryID = new Guid("b7a3a853-73c6-4f02-913b-9765019e9bd0"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(7765),
                            IsDelete = false,
                            Price = 25000.0,
                            ProductDescription = "Bánh mì siêu topping thịt trứng cút, ăn là ghiền!!!",
                            ProductName = "Bánh mì Sài Gòn"
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Route");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ea675490-eecd-4308-bb71-61b72a9c979f"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8256),
                            FromLocation = "Quận 1, Tp.Hcm",
                            IsDelete = false,
                            ToLocation = "Quận 9, Tp.Hcm"
                        },
                        new
                        {
                            Id = new Guid("001a254c-02d4-40e7-a01f-95f393fb41ef"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8297),
                            FromLocation = "Quận 1, Tp.Hcm",
                            IsDelete = false,
                            ToLocation = "Suối Tiên, Đồng Nai"
                        },
                        new
                        {
                            Id = new Guid("a437b242-55fc-4146-a2b9-8c952b107e3a"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8300),
                            FromLocation = "Quận 1, Tp.Hcm",
                            IsDelete = false,
                            ToLocation = "Quận Thủ Đức, Tp.Hcm"
                        },
                        new
                        {
                            Id = new Guid("ccc66514-0597-4d43-aaff-0c5d8ee59ffa"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8301),
                            FromLocation = "Quận 1, Tp.Hcm",
                            IsDelete = false,
                            ToLocation = "Quận Bình Thạnh, Tp.Hcm"
                        },
                        new
                        {
                            Id = new Guid("b9f8f712-92ee-4611-ad55-000a8e1b84c6"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8303),
                            FromLocation = "Quận 1, Tp.Hcm",
                            IsDelete = false,
                            ToLocation = "Bến xe Miền Đông"
                        },
                        new
                        {
                            Id = new Guid("42f184eb-58b3-4b9b-be52-1da57f8ffb3f"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8309),
                            FromLocation = "Quận Bình Thạnh",
                            IsDelete = false,
                            ToLocation = "Bến Thành, Quận 1, TP HCM"
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Route_Station", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RouteID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan?>("StopTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("RouteID");

                    b.HasIndex("StationID");

                    b.ToTable("Route_Station");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6e841857-2712-4da3-a15f-aed820adef5a"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8043),
                            Duration = new TimeSpan(0, 0, 30, 0, 0),
                            Index = 2,
                            IsDelete = false,
                            RouteID = new Guid("ea675490-eecd-4308-bb71-61b72a9c979f"),
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c7"),
                            StopTime = new TimeSpan(0, 1, 30, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("1b22bdb7-1688-42fa-8fae-4af92e32df7f"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8063),
                            Duration = new TimeSpan(0, 0, 30, 0, 0),
                            Index = 1,
                            IsDelete = false,
                            RouteID = new Guid("ccc66514-0597-4d43-aaff-0c5d8ee59ffa"),
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c5"),
                            StopTime = new TimeSpan(0, 0, 30, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("2ff9d0d9-474c-4466-b9a8-707b730f415c"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8070),
                            Duration = new TimeSpan(0, 0, 30, 0, 0),
                            Index = 1,
                            IsDelete = false,
                            RouteID = new Guid("a437b242-55fc-4146-a2b9-8c952b107e3a"),
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c5"),
                            StopTime = new TimeSpan(0, 1, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("ab2099b4-e511-42ff-9e6a-ee71bddcd482"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8077),
                            Duration = new TimeSpan(0, 0, 30, 0, 0),
                            Index = 1,
                            IsDelete = false,
                            RouteID = new Guid("001a254c-02d4-40e7-a01f-95f393fb41ef"),
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c5"),
                            StopTime = new TimeSpan(0, 2, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("15fefdbf-b178-49ba-aa7c-7b3e2dd575bc"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8084),
                            Duration = new TimeSpan(0, 1, 0, 0, 0),
                            Index = 2,
                            IsDelete = false,
                            RouteID = new Guid("001a254c-02d4-40e7-a01f-95f393fb41ef"),
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c6"),
                            StopTime = new TimeSpan(0, 2, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("8de6ed00-50c8-434e-95ce-cc921426e697"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8094),
                            Duration = new TimeSpan(0, 1, 30, 0, 0),
                            Index = 3,
                            IsDelete = false,
                            RouteID = new Guid("001a254c-02d4-40e7-a01f-95f393fb41ef"),
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c7"),
                            StopTime = new TimeSpan(0, 2, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("6a82db5a-23cf-4764-b7d1-ccabce5cc317"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8103),
                            Duration = new TimeSpan(0, 1, 40, 0, 0),
                            Index = 3,
                            IsDelete = false,
                            RouteID = new Guid("b9f8f712-92ee-4611-ad55-000a8e1b84c6"),
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c9"),
                            StopTime = new TimeSpan(0, 3, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("5004477e-1446-467d-8157-972185d64290"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8115),
                            Duration = new TimeSpan(0, 0, 40, 0, 0),
                            Index = 0,
                            IsDelete = false,
                            RouteID = new Guid("42f184eb-58b3-4b9b-be52-1da57f8ffb3f"),
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c4"),
                            StopTime = new TimeSpan(0, 0, 40, 0, 0)
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Station", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StoreID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StoreID");

                    b.ToTable("Station");

                    b.HasData(
                        new
                        {
                            Id = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c4"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8725),
                            IsDelete = false,
                            StationName = "Ga Metro Bến Thành",
                            StoreID = new Guid("aa2610a8-de94-42b7-b12b-1cf8710e05d8")
                        },
                        new
                        {
                            Id = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c5"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8728),
                            IsDelete = false,
                            StationName = "Ga Metro Vincom Bình Thạnh",
                            StoreID = new Guid("d3599df7-877e-41c7-832d-14850e5c88bd")
                        },
                        new
                        {
                            Id = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c6"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8731),
                            IsDelete = false,
                            StationName = "Ga Metro Chợ Thủ Đức",
                            StoreID = new Guid("2f3eee35-1b8e-43af-956f-eacd94eea7cd")
                        },
                        new
                        {
                            Id = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c7"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8735),
                            IsDelete = false,
                            StationName = "Ga Metro Khu Công Nghệ Cao",
                            StoreID = new Guid("70c6a937-f285-4495-8407-b20a0c9b10f3")
                        },
                        new
                        {
                            Id = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c8"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8743),
                            IsDelete = false,
                            StationName = "Ga Metro Suối Tiên",
                            StoreID = new Guid("ef443e4b-886c-4c06-8528-51e9cf623867")
                        },
                        new
                        {
                            Id = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c9"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8745),
                            IsDelete = false,
                            StationName = "Ga Metro Bến xe Miền Đông",
                            StoreID = new Guid("6507b7db-7255-4274-87a4-6e2dc3d8a3c4")
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Station_Trip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Arrived")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TripID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StationID");

                    b.HasIndex("TripID");

                    b.ToTable("Station_Trip");

                    b.HasData(
                        new
                        {
                            Id = new Guid("26dce51c-6e18-4b34-b03c-6a6e9b7d5b3a"),
                            Arrived = new DateTime(2023, 7, 17, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8436),
                            IsDelete = false,
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c7"),
                            TripID = new Guid("823ad122-7b51-4dab-9d37-b0f238d4a2ff")
                        },
                        new
                        {
                            Id = new Guid("2d6009e9-229d-449f-978b-ee33e75495c0"),
                            Arrived = new DateTime(2023, 9, 15, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8538),
                            IsDelete = false,
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c6"),
                            TripID = new Guid("02859382-d88c-4e69-8c47-b8e0456677d5")
                        },
                        new
                        {
                            Id = new Guid("218a6839-fd42-44c5-88e0-5f3bc71fda29"),
                            Arrived = new DateTime(2023, 11, 14, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8549),
                            IsDelete = false,
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c5"),
                            TripID = new Guid("27421cac-1da7-4df8-9928-7fb636ca42aa")
                        },
                        new
                        {
                            Id = new Guid("531ebf5c-9a62-4dc9-b455-04333c4f061c"),
                            Arrived = new DateTime(2023, 12, 23, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8556),
                            IsDelete = false,
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c8"),
                            TripID = new Guid("5b30c4e9-31ab-456c-b212-dc6b2ba9a3e7")
                        },
                        new
                        {
                            Id = new Guid("8b072155-f302-45ec-8729-a9aaab92d543"),
                            Arrived = new DateTime(2023, 5, 25, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8564),
                            IsDelete = false,
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c8"),
                            TripID = new Guid("9c2ab923-4c57-44d7-9c1a-b44c0d3e6b00")
                        },
                        new
                        {
                            Id = new Guid("ad84ae87-2d44-4222-a9d6-9cb923ac8a86"),
                            Arrived = new DateTime(2023, 5, 26, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8571),
                            IsDelete = false,
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c6"),
                            TripID = new Guid("9c2ab923-4c57-44d7-9c1a-b44c0d3e6b00")
                        },
                        new
                        {
                            Id = new Guid("8e9890ce-45c0-459f-a06d-f5eb8d97cae4"),
                            Arrived = new DateTime(2023, 6, 16, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8577),
                            IsDelete = false,
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c5"),
                            TripID = new Guid("9c2ab923-4c57-44d7-9c1a-b44c0d3e6b00")
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("StoreCloseTime")
                        .HasColumnType("time");

                    b.Property<string>("StoreLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("StoreOpenTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Store");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aa2610a8-de94-42b7-b12b-1cf8710e05d8"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(9045),
                            IsDelete = false,
                            StoreCloseTime = new TimeSpan(0, 23, 0, 0, 0),
                            StoreLocation = "Số 2, Đường Lê Lai, Quận 1",
                            StoreName = "Metro PickUp 1",
                            StoreOpenTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("d3599df7-877e-41c7-832d-14850e5c88bd"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(9057),
                            IsDelete = false,
                            StoreCloseTime = new TimeSpan(0, 6, 0, 0, 0),
                            StoreLocation = "Số 3, Vincom, Quận Bình Thạnh",
                            StoreName = "Metro PickUp 2",
                            StoreOpenTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("2f3eee35-1b8e-43af-956f-eacd94eea7cd"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(9063),
                            IsDelete = false,
                            StoreCloseTime = new TimeSpan(0, 6, 0, 0, 0),
                            StoreLocation = "Số 1, Võ Văn Ngân, Thành Phố Thủ Đức",
                            StoreName = "Metro PickUp 3",
                            StoreOpenTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("70c6a937-f285-4495-8407-b20a0c9b10f3"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(9071),
                            IsDelete = false,
                            StoreCloseTime = new TimeSpan(0, 6, 0, 0, 0),
                            StoreLocation = "Khu Công Nghệ Cao Thành Phố Thủ Đức ",
                            StoreName = "Metro PickUp 4",
                            StoreOpenTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("ef443e4b-886c-4c06-8528-51e9cf623867"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(9077),
                            IsDelete = false,
                            StoreCloseTime = new TimeSpan(0, 6, 0, 0, 0),
                            StoreLocation = "Suối tiên",
                            StoreName = "Metro PickUp 5",
                            StoreOpenTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("6507b7db-7255-4274-87a4-6e2dc3d8a3c4"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(9083),
                            IsDelete = false,
                            StoreCloseTime = new TimeSpan(0, 6, 0, 0, 0),
                            StoreLocation = "Bến Xe Miền Đông",
                            StoreName = "Metro PickUp 6",
                            StoreOpenTime = new TimeSpan(0, 6, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Store_Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("StoreId");

                    b.ToTable("Store_Menu");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e60fa834-0f86-490c-ac31-aa358429d04b"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8872),
                            IsDelete = false,
                            MenuId = new Guid("e7a15238-5db0-49bd-94e6-d5f8b77ae6ce"),
                            StoreId = new Guid("aa2610a8-de94-42b7-b12b-1cf8710e05d8")
                        },
                        new
                        {
                            Id = new Guid("f70cc8b9-80b4-4a51-84be-85a4cb9f9548"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8876),
                            IsDelete = false,
                            MenuId = new Guid("5263453c-dae9-45e4-8204-5430a7256cde"),
                            StoreId = new Guid("aa2610a8-de94-42b7-b12b-1cf8710e05d8")
                        },
                        new
                        {
                            Id = new Guid("c32108a1-da8f-4462-994b-53ba66f6771f"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8882),
                            IsDelete = false,
                            MenuId = new Guid("9b08173a-e338-45ef-b479-6b0e95f2b055"),
                            StoreId = new Guid("aa2610a8-de94-42b7-b12b-1cf8710e05d8")
                        },
                        new
                        {
                            Id = new Guid("aea8ef18-75b7-42a5-8aad-f7438774abf6"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8885),
                            IsDelete = false,
                            MenuId = new Guid("47a91dd5-f999-461a-8f80-935d169ca0c3"),
                            StoreId = new Guid("aa2610a8-de94-42b7-b12b-1cf8710e05d8")
                        },
                        new
                        {
                            Id = new Guid("fc176db9-5959-4373-8d8b-0ac6e5056f02"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8888),
                            IsDelete = false,
                            MenuId = new Guid("d6184ea2-9833-499f-9a56-8138c3b60c78"),
                            StoreId = new Guid("aa2610a8-de94-42b7-b12b-1cf8710e05d8")
                        },
                        new
                        {
                            Id = new Guid("2114fdc1-5b69-472c-92dd-470cc3de948f"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8890),
                            IsDelete = false,
                            MenuId = new Guid("bbc7d071-5f5b-40be-b25e-3aa07a6c3e7c"),
                            StoreId = new Guid("aa2610a8-de94-42b7-b12b-1cf8710e05d8")
                        },
                        new
                        {
                            Id = new Guid("dc24099c-1234-4414-a332-92058136819b"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(8893),
                            IsDelete = false,
                            MenuId = new Guid("4cbf8910-c204-46fe-91d4-e8e4c94ff695"),
                            StoreId = new Guid("aa2610a8-de94-42b7-b12b-1cf8710e05d8")
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Trip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TripEndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TripName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TripStartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("Trip");

                    b.HasData(
                        new
                        {
                            Id = new Guid("823ad122-7b51-4dab-9d37-b0f238d4a2ff"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(9671),
                            IsDelete = false,
                            RouteId = new Guid("ea675490-eecd-4308-bb71-61b72a9c979f"),
                            TripEndTime = new DateTime(2023, 7, 17, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TripName = "Camping Trip",
                            TripStartTime = new DateTime(2023, 7, 15, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9c2ab923-4c57-44d7-9c1a-b44c0d3e6b00"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(9705),
                            IsDelete = false,
                            RouteId = new Guid("001a254c-02d4-40e7-a01f-95f393fb41ef"),
                            TripEndTime = new DateTime(2023, 5, 25, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            TripName = "Road Trip",
                            TripStartTime = new DateTime(2023, 5, 20, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("02859382-d88c-4e69-8c47-b8e0456677d5"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(9717),
                            IsDelete = false,
                            RouteId = new Guid("a437b242-55fc-4146-a2b9-8c952b107e3a"),
                            TripEndTime = new DateTime(2023, 9, 15, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            TripName = "Cruise Vacation",
                            TripStartTime = new DateTime(2023, 9, 10, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("27421cac-1da7-4df8-9928-7fb636ca42aa"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(9728),
                            IsDelete = false,
                            RouteId = new Guid("ccc66514-0597-4d43-aaff-0c5d8ee59ffa"),
                            TripEndTime = new DateTime(2023, 11, 14, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            TripName = "Hiking Adventure",
                            TripStartTime = new DateTime(2023, 11, 12, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5b30c4e9-31ab-456c-b212-dc6b2ba9a3e7"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(9738),
                            IsDelete = false,
                            RouteId = new Guid("001a254c-02d4-40e7-a01f-95f393fb41ef"),
                            TripEndTime = new DateTime(2023, 12, 23, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            TripName = "Ski Getaway",
                            TripStartTime = new DateTime(2023, 12, 20, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9b4d232c-0fda-4ec0-beed-ecd649ee9c52"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(9752),
                            IsDelete = false,
                            RouteId = new Guid("42f184eb-58b3-4b9b-be52-1da57f8ffb3f"),
                            TripEndTime = new DateTime(2023, 8, 18, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            TripName = "Tropical Vacation",
                            TripStartTime = new DateTime(2023, 8, 13, 11, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("bf736039-33e9-466f-ac4e-78c89f3317e6"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(9763),
                            IsDelete = false,
                            RouteId = new Guid("a437b242-55fc-4146-a2b9-8c952b107e3a"),
                            TripEndTime = new DateTime(2023, 7, 6, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            TripName = "Amusement Park Fun",
                            TripStartTime = new DateTime(2023, 7, 4, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8a2ba7d5-7019-49c6-a47d-ab0a072e7932"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(9774),
                            IsDelete = false,
                            RouteId = new Guid("b9f8f712-92ee-4611-ad55-000a8e1b84c6"),
                            TripEndTime = new DateTime(2023, 10, 3, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            TripName = "African Safari",
                            TripStartTime = new DateTime(2023, 9, 28, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d9852f0d-e836-4a6e-94f4-d229b297933d"),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 246, DateTimeKind.Local).AddTicks(9785),
                            IsDelete = false,
                            RouteId = new Guid("a437b242-55fc-4146-a2b9-8c952b107e3a"),
                            TripEndTime = new DateTime(2023, 5, 8, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            TripName = "Botanical Gardens Tour",
                            TripStartTime = new DateTime(2023, 5, 6, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.WithDraw", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateTimeOfWithdraw")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Deposit")
                        .HasColumnType("float");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PaymentMethodID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerID");

                    b.HasIndex("PaymentMethodID");

                    b.ToTable("WithDraw");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4e917707-0edb-49da-b6f4-804d2c52821b"),
                            Balance = 150000.0,
                            CreateTimeOfWithdraw = new DateTime(2023, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 247, DateTimeKind.Local).AddTicks(215),
                            CustomerID = new Guid("0512a248-0054-4616-ade5-ae412f4f07bd"),
                            Deposit = 60000.0,
                            IsDelete = false,
                            PaymentMethodID = new Guid("71b4bf27-e569-47a0-b16a-e484533bd9f2")
                        },
                        new
                        {
                            Id = new Guid("8efb8acc-2eb9-448d-bfa2-825995f50b59"),
                            Balance = 0.0,
                            CreateTimeOfWithdraw = new DateTime(2023, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 247, DateTimeKind.Local).AddTicks(234),
                            CustomerID = new Guid("ecf95bf5-d766-4b6e-94a7-d33ea29c0618"),
                            Deposit = 30000.0,
                            IsDelete = false,
                            PaymentMethodID = new Guid("71b4bf27-e569-47a0-b16a-e484533bd9f2")
                        },
                        new
                        {
                            Id = new Guid("0bd9818a-5ef1-45e3-a6fe-0c932f970fe8"),
                            Balance = 2000000.0,
                            CreateTimeOfWithdraw = new DateTime(2022, 12, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 10, 15, 16, 5, 43, 247, DateTimeKind.Local).AddTicks(243),
                            CustomerID = new Guid("01d31c40-14c9-444c-a2fe-f58ea0fbc08a"),
                            Deposit = 125000.0,
                            IsDelete = false,
                            PaymentMethodID = new Guid("71b4bf27-e569-47a0-b16a-e484533bd9f2")
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.IdentityModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2198E4CD-3305-49C5-B78A-0B54DD76898F",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8272b8bd-723c-46fa-b271-36a707733b88",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nhan",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEB0F6fDvKvyRGDBDDL4USSmke1+8m4QPRynORI6gqfcqc3VJ/BZhiL1nMiMYAoesDg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "137a9eb5-3e05-4044-8aaa-1446bb84cb8e",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "E6DE8827-B7C2-46E9-9227-66E6ECE676A8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "306dae96-a572-4916-a6c1-a48979b1d650",
                            Email = "enduser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Vi",
                            LastName = "EndUser",
                            LockoutEnabled = false,
                            NormalizedEmail = "ENDUSER@GMAIL.COM",
                            NormalizedUserName = "ENDUSER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMvAHqAK7BHmJwiVLAu0eTWSzLYnADvaejvBeDLBCYb/buAQ5CoCHFfkUh4Nc5ZJVg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8f06ab10-aa75-4ee5-9c6e-e50dccc31eda",
                            TwoFactorEnabled = false,
                            UserName = "enduser@gmail.com"
                        },
                        new
                        {
                            Id = "2C0B43BB-B991-408E-A8F3-2FD3B4A2AB84",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "63defa2a-b404-4fe4-b2d5-873f66cd0686",
                            Email = "staff@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Vi",
                            LastName = "Staff",
                            LockoutEnabled = false,
                            NormalizedEmail = "STAFF@GMAIL.COM",
                            NormalizedUserName = "STAFF@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMFN/HkpGJVNhmTedRvI8xc9ZD3UMoGELoatg4So8Sym+ln3UQ2w1YRpEpMTrg1iOA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "489e613a-a706-420d-9fcd-600ffcc2d795",
                            TwoFactorEnabled = false,
                            UserName = "staff@gmail.com"
                        },
                        new
                        {
                            Id = "2E089AF6-3437-4DD6-9956-BB792E783AFB",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ded1b101-f477-4b78-b253-68e3fcac0f39",
                            Email = "nguyenthanhn537@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nhân",
                            LastName = "Nguyễn",
                            LockoutEnabled = false,
                            NormalizedEmail = "NGUYENTHANHN537@GMAIL.COM",
                            NormalizedUserName = "NGUYENTHANHN537@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGWvIoFys5vxkPKAOhjfZ70nYOEDWsEuBLUwwsQlq4lxE+Ium3DO6tkF8VPO8otNkg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7b892e0e-6856-4539-98e5-7a0bb274da30",
                            TwoFactorEnabled = false,
                            UserName = "nguyenthanhn537@gmail.com"
                        },
                        new
                        {
                            Id = "1F11BA64-2870-43F7-BB03-867112867F25",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fb0c00cc-4683-4fec-8110-33d278485dff",
                            Email = "thaivin537@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Thái",
                            LastName = "Vĩ",
                            LockoutEnabled = false,
                            NormalizedEmail = "THAIVIN537@GMAIL.COM",
                            NormalizedUserName = "THAIVIN537@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEH1UnPJaK5wzeewm969IamD5DexnTOhFyRF0ELWQSfvZWvbtQe4WSn01vovwjvwW/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5c783b1f-1027-4ade-8846-22f791d095a6",
                            TwoFactorEnabled = false,
                            UserName = "thaivin537@gmail.com"
                        },
                        new
                        {
                            Id = "C4EE82A1-DB88-49A6-81A8-4B9521FF01F9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c538a6ec-28c7-4570-b98e-cb7a1ab2daa0",
                            Email = "anhjenda537@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Anh",
                            LastName = "Da Đen",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANHJENDA537@GMAIL.COM",
                            NormalizedUserName = "ANHJENDA537@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELnJSjHahqza42SavbRqJLjK8lmXaXlvupL3ZW/TbvDlhvMTEBvII9wbL6HrO6WZ2A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1a10eade-bc09-4ff8-8ea9-3545c26d348e",
                            TwoFactorEnabled = false,
                            UserName = "anhjenda537@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "CF531396-C1CD-427B-9D17-0383B7675394",
                            ConcurrencyStamp = "b728f91a-a1ef-426e-a86d-4557ba5095b8",
                            Name = "EndUser",
                            NormalizedName = "EndUser"
                        },
                        new
                        {
                            Id = "AF5EB4AC-219A-4BC1-99FE-8C23876536EA",
                            ConcurrencyStamp = "d2d70aba-e6c0-46aa-802b-1a6180922030",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "647D9649-F5A2-4F24-808F-6FC326EC2AA3",
                            ConcurrencyStamp = "802cc645-6da8-4f30-8d70-bf6c727b0c66",
                            Name = "Staff",
                            NormalizedName = "Staff"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2C0B43BB-B991-408E-A8F3-2FD3B4A2AB84",
                            RoleId = "647D9649-F5A2-4F24-808F-6FC326EC2AA3"
                        },
                        new
                        {
                            UserId = "E6DE8827-B7C2-46E9-9227-66E6ECE676A8",
                            RoleId = "CF531396-C1CD-427B-9D17-0383B7675394"
                        },
                        new
                        {
                            UserId = "2198E4CD-3305-49C5-B78A-0B54DD76898F",
                            RoleId = "AF5EB4AC-219A-4BC1-99FE-8C23876536EA"
                        },
                        new
                        {
                            UserId = "C4EE82A1-DB88-49A6-81A8-4B9521FF01F9",
                            RoleId = "CF531396-C1CD-427B-9D17-0383B7675394"
                        },
                        new
                        {
                            UserId = "2E089AF6-3437-4DD6-9956-BB792E783AFB",
                            RoleId = "CF531396-C1CD-427B-9D17-0383B7675394"
                        },
                        new
                        {
                            UserId = "1F11BA64-2870-43F7-BB03-867112867F25",
                            RoleId = "CF531396-C1CD-427B-9D17-0383B7675394"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Customer", b =>
                {
                    b.HasOne("MetroDelivery.Domain.IdentityModels.ApplicationUser", "ApplicationUser")
                        .WithOne("Customer")
                        .HasForeignKey("MetroDelivery.Domain.Entities.Customer", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Menu_Product", b =>
                {
                    b.HasOne("MetroDelivery.Domain.Entities.Menu", "Menu")
                        .WithMany("Menu_Product")
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroDelivery.Domain.Entities.Product", "Products")
                        .WithMany("Menu_Products")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Order", b =>
                {
                    b.HasOne("MetroDelivery.Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroDelivery.Domain.Entities.Store", "Store")
                        .WithMany("Orders")
                        .HasForeignKey("StoreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroDelivery.Domain.Entities.Trip", "Trip")
                        .WithMany("Order")
                        .HasForeignKey("TripID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Store");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("MetroDelivery.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetail")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroDelivery.Domain.Entities.Product", "Products")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Product", b =>
                {
                    b.HasOne("MetroDelivery.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Route_Station", b =>
                {
                    b.HasOne("MetroDelivery.Domain.Entities.Route", "Route")
                        .WithMany("Route_Stations")
                        .HasForeignKey("RouteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroDelivery.Domain.Entities.Station", "Station")
                        .WithMany("Route_Stations")
                        .HasForeignKey("StationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Station", b =>
                {
                    b.HasOne("MetroDelivery.Domain.Entities.Store", "Store")
                        .WithMany("Stations")
                        .HasForeignKey("StoreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Station_Trip", b =>
                {
                    b.HasOne("MetroDelivery.Domain.Entities.Station", "Station")
                        .WithMany("Station_Trip")
                        .HasForeignKey("StationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroDelivery.Domain.Entities.Trip", "Trip")
                        .WithMany("Station_Trip")
                        .HasForeignKey("TripID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Store_Menu", b =>
                {
                    b.HasOne("MetroDelivery.Domain.Entities.Menu", "Menu")
                        .WithMany("Store_Menu")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroDelivery.Domain.Entities.Store", "Store")
                        .WithMany("Store_Menu")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Trip", b =>
                {
                    b.HasOne("MetroDelivery.Domain.Entities.Route", "Route")
                        .WithMany("Trip")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.WithDraw", b =>
                {
                    b.HasOne("MetroDelivery.Domain.Entities.Customer", "Customer")
                        .WithMany("WithDraws")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroDelivery.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("WithDraw")
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MetroDelivery.Domain.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MetroDelivery.Domain.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroDelivery.Domain.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MetroDelivery.Domain.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("WithDraws");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Menu", b =>
                {
                    b.Navigation("Menu_Product");

                    b.Navigation("Store_Menu");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.PaymentMethod", b =>
                {
                    b.Navigation("WithDraw");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Product", b =>
                {
                    b.Navigation("Menu_Products");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Route", b =>
                {
                    b.Navigation("Route_Stations");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Station", b =>
                {
                    b.Navigation("Route_Stations");

                    b.Navigation("Station_Trip");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Store", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Stations");

                    b.Navigation("Store_Menu");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Trip", b =>
                {
                    b.Navigation("Order");

                    b.Navigation("Station_Trip");
                });

            modelBuilder.Entity("MetroDelivery.Domain.IdentityModels.ApplicationUser", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
