// <auto-generated />
using System;
using MetroDelivery.Identity.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MetroDelivery.Identity.Migrations
{
    [DbContext(typeof(MetroPickupIdentityDbContext))]
    partial class MetroPickupIdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9afcdfac-1a27-496b-84e5-0c8e5804e40e"),
                            CategoryName = "Food",
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 447, DateTimeKind.Local).AddTicks(8409),
                            IsDelete = false
                        },
                        new
                        {
                            Id = new Guid("4078ef19-ba53-481d-9c5a-1c37dfe0e0dc"),
                            CategoryName = "Beverages",
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 447, DateTimeKind.Local).AddTicks(8441),
                            IsDelete = false
                        },
                        new
                        {
                            Id = new Guid("b7a3a853-73c6-4f02-913b-9765019e9bd0"),
                            CategoryName = "Bread",
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 447, DateTimeKind.Local).AddTicks(8445),
                            IsDelete = false
                        },
                        new
                        {
                            Id = new Guid("175d4c8d-d2f0-441b-85cb-45a1cb0b6756"),
                            CategoryName = "Candy",
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 447, DateTimeKind.Local).AddTicks(8448),
                            IsDelete = false
                        },
                        new
                        {
                            Id = new Guid("8908ea98-b421-420b-9634-03ed356bb921"),
                            CategoryName = "Chips",
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 447, DateTimeKind.Local).AddTicks(8451),
                            IsDelete = false
                        },
                        new
                        {
                            Id = new Guid("9b2cccb2-f5fa-4358-8265-0fe4f7a52253"),
                            CategoryName = "Cookies",
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 447, DateTimeKind.Local).AddTicks(8454),
                            IsDelete = false
                        },
                        new
                        {
                            Id = new Guid("39696f0c-2c8a-480f-b917-141b7da708e4"),
                            CategoryName = "Dairy",
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 447, DateTimeKind.Local).AddTicks(8457),
                            IsDelete = false
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTimeService")
                        .HasColumnType("time");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("StartTimeService")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Menu");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e7a15238-5db0-49bd-94e6-d5f8b77ae6ce"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 447, DateTimeKind.Local).AddTicks(9438),
                            EndTimeService = new TimeSpan(0, 13, 0, 0, 0),
                            IsDelete = false,
                            MenuName = "Bữa sáng 1",
                            StartTimeService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("5263453c-dae9-45e4-8204-5430a7256cde"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 447, DateTimeKind.Local).AddTicks(9493),
                            EndTimeService = new TimeSpan(0, 22, 0, 0, 0),
                            IsDelete = false,
                            MenuName = "Bữa chiều 1",
                            StartTimeService = new TimeSpan(0, 13, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("d3fd2009-c658-4498-bf59-26936918a0c8"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 447, DateTimeKind.Local).AddTicks(9505),
                            EndTimeService = new TimeSpan(0, 22, 0, 0, 0),
                            IsDelete = false,
                            MenuName = "Bữa chiều 2",
                            StartTimeService = new TimeSpan(0, 13, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Menu_Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MenuID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("PriceOfProductBelongToTimeService")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MenuID");

                    b.HasIndex("ProductID");

                    b.ToTable("Menu_Product");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2d9e046b-e154-447b-b1f5-ccc31fa394f5"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 447, DateTimeKind.Local).AddTicks(8773),
                            IsDelete = false,
                            MenuID = new Guid("d3fd2009-c658-4498-bf59-26936918a0c8"),
                            PriceOfProductBelongToTimeService = 20000.0,
                            ProductID = new Guid("43203ce4-d82c-4c78-8794-2aef22d7ec5b")
                        },
                        new
                        {
                            Id = new Guid("185a58a3-0e78-47f2-bb50-f24a32cf9347"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 447, DateTimeKind.Local).AddTicks(8904),
                            IsDelete = false,
                            MenuID = new Guid("e7a15238-5db0-49bd-94e6-d5f8b77ae6ce"),
                            PriceOfProductBelongToTimeService = 15000.0,
                            ProductID = new Guid("e802b6c5-f08e-4eff-b7e7-af95514b4341")
                        },
                        new
                        {
                            Id = new Guid("2909a722-e8ae-4bac-bc71-f06b24918167"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 447, DateTimeKind.Local).AddTicks(8911),
                            IsDelete = false,
                            MenuID = new Guid("e7a15238-5db0-49bd-94e6-d5f8b77ae6ce"),
                            PriceOfProductBelongToTimeService = 1000.0,
                            ProductID = new Guid("ffb05663-954d-4af3-8a41-91af39446f81")
                        },
                        new
                        {
                            Id = new Guid("0cc34d06-ea37-448f-b487-b4faea07c47f"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 447, DateTimeKind.Local).AddTicks(8915),
                            IsDelete = false,
                            MenuID = new Guid("5263453c-dae9-45e4-8204-5430a7256cde"),
                            PriceOfProductBelongToTimeService = 30000.0,
                            ProductID = new Guid("f31c789c-4a46-45c7-9009-d36681d788c5")
                        },
                        new
                        {
                            Id = new Guid("9010cfaf-d6f6-46d1-8b6f-0ed15f47b481"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 447, DateTimeKind.Local).AddTicks(8919),
                            IsDelete = false,
                            MenuID = new Guid("e7a15238-5db0-49bd-94e6-d5f8b77ae6ce"),
                            PriceOfProductBelongToTimeService = 50000.0,
                            ProductID = new Guid("107f1f75-b23b-4bc4-92d7-f2e90d067d1f")
                        },
                        new
                        {
                            Id = new Guid("2f6796d8-b355-48c3-a2c0-169ac3546700"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 447, DateTimeKind.Local).AddTicks(8922),
                            IsDelete = false,
                            MenuID = new Guid("5263453c-dae9-45e4-8204-5430a7256cde"),
                            PriceOfProductBelongToTimeService = 35000.0,
                            ProductID = new Guid("1616cc05-8c82-4f8b-a6e0-f60ab3de0d38")
                        },
                        new
                        {
                            Id = new Guid("9fea0cad-3033-4345-85e9-539278e38b38"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 447, DateTimeKind.Local).AddTicks(8927),
                            IsDelete = false,
                            MenuID = new Guid("5263453c-dae9-45e4-8204-5430a7256cde"),
                            PriceOfProductBelongToTimeService = 35000.0,
                            ProductID = new Guid("43203ce4-d82c-4c78-8794-2aef22d7ec5b")
                        },
                        new
                        {
                            Id = new Guid("a0794f4a-4d40-4a9b-b9b3-d64139d64edd"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 447, DateTimeKind.Local).AddTicks(8930),
                            IsDelete = false,
                            MenuID = new Guid("5263453c-dae9-45e4-8204-5430a7256cde"),
                            PriceOfProductBelongToTimeService = 159000.0,
                            ProductID = new Guid("4c9ec4b9-1c16-4c7a-90bf-d620aab257b6")
                        },
                        new
                        {
                            Id = new Guid("c947cd02-055e-4ddd-b082-e6a379bd566e"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 447, DateTimeKind.Local).AddTicks(8934),
                            IsDelete = false,
                            MenuID = new Guid("5263453c-dae9-45e4-8204-5430a7256cde"),
                            PriceOfProductBelongToTimeService = 100000.0,
                            ProductID = new Guid("0c308b93-b26a-4224-9d63-28294711aa15")
                        },
                        new
                        {
                            Id = new Guid("d157d135-81d8-42ae-89e7-fda1eb5f4684"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 447, DateTimeKind.Local).AddTicks(8941),
                            IsDelete = false,
                            MenuID = new Guid("5263453c-dae9-45e4-8204-5430a7256cde"),
                            PriceOfProductBelongToTimeService = 25000.0,
                            ProductID = new Guid("b834cf11-cc28-4e7d-9846-2acc8ad33d8c")
                        },
                        new
                        {
                            Id = new Guid("dd11129d-e0d3-45db-a182-7be71fe00ee5"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 447, DateTimeKind.Local).AddTicks(8944),
                            IsDelete = false,
                            MenuID = new Guid("e7a15238-5db0-49bd-94e6-d5f8b77ae6ce"),
                            PriceOfProductBelongToTimeService = 100000.0,
                            ProductID = new Guid("0c308b93-b26a-4224-9d63-28294711aa15")
                        },
                        new
                        {
                            Id = new Guid("08e8eb20-a5c5-490e-b837-49f646b201a2"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 447, DateTimeKind.Local).AddTicks(8948),
                            IsDelete = false,
                            MenuID = new Guid("e7a15238-5db0-49bd-94e6-d5f8b77ae6ce"),
                            PriceOfProductBelongToTimeService = 25000.0,
                            ProductID = new Guid("b834cf11-cc28-4e7d-9846-2acc8ad33d8c")
                        },
                        new
                        {
                            Id = new Guid("12e141ab-a5b4-43ac-8166-4e22ad7f3bce"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 447, DateTimeKind.Local).AddTicks(8951),
                            IsDelete = false,
                            MenuID = new Guid("e7a15238-5db0-49bd-94e6-d5f8b77ae6ce"),
                            PriceOfProductBelongToTimeService = 35000.0,
                            ProductID = new Guid("43203ce4-d82c-4c78-8794-2aef22d7ec5b")
                        },
                        new
                        {
                            Id = new Guid("287e2475-abd3-4876-bac7-03e667167de0"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 447, DateTimeKind.Local).AddTicks(8955),
                            IsDelete = false,
                            MenuID = new Guid("e7a15238-5db0-49bd-94e6-d5f8b77ae6ce"),
                            PriceOfProductBelongToTimeService = 159000.0,
                            ProductID = new Guid("4c9ec4b9-1c16-4c7a-90bf-d620aab257b6")
                        },
                        new
                        {
                            Id = new Guid("4b788386-2b8a-448d-9744-832609ade318"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 447, DateTimeKind.Local).AddTicks(8959),
                            IsDelete = false,
                            MenuID = new Guid("5263453c-dae9-45e4-8204-5430a7256cde"),
                            PriceOfProductBelongToTimeService = 20000.0,
                            ProductID = new Guid("43203ce4-d82c-4c78-8794-2aef22d7ec5b")
                        },
                        new
                        {
                            Id = new Guid("d401389d-afc6-4db1-ab9d-d16f74c41591"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 447, DateTimeKind.Local).AddTicks(8963),
                            IsDelete = false,
                            MenuID = new Guid("5263453c-dae9-45e4-8204-5430a7256cde"),
                            PriceOfProductBelongToTimeService = 15000.0,
                            ProductID = new Guid("e802b6c5-f08e-4eff-b7e7-af95514b4341")
                        },
                        new
                        {
                            Id = new Guid("7c5e8660-b620-46ef-b595-502e4e175be1"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 447, DateTimeKind.Local).AddTicks(8966),
                            IsDelete = false,
                            MenuID = new Guid("5263453c-dae9-45e4-8204-5430a7256cde"),
                            PriceOfProductBelongToTimeService = 1000.0,
                            ProductID = new Guid("ffb05663-954d-4af3-8a41-91af39446f81")
                        },
                        new
                        {
                            Id = new Guid("f52cc855-1109-4f05-8085-7666d33db721"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 447, DateTimeKind.Local).AddTicks(8973),
                            IsDelete = false,
                            MenuID = new Guid("5263453c-dae9-45e4-8204-5430a7256cde"),
                            PriceOfProductBelongToTimeService = 30000.0,
                            ProductID = new Guid("f31c789c-4a46-45c7-9009-d36681d788c5")
                        },
                        new
                        {
                            Id = new Guid("07168d9f-786b-4284-b596-bb6dc93ca150"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 447, DateTimeKind.Local).AddTicks(8983),
                            IsDelete = false,
                            MenuID = new Guid("5263453c-dae9-45e4-8204-5430a7256cde"),
                            PriceOfProductBelongToTimeService = 50000.0,
                            ProductID = new Guid("107f1f75-b23b-4bc4-92d7-f2e90d067d1f")
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<string>("OrderTokenQR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StoreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<Guid>("TripID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("StoreID");

                    b.HasIndex("TripID");

                    b.ToTable("Order");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a8af2f67-447f-4f70-b660-4dd08fa47d4d"),
                            ApplicationUserID = "E6DE8827-B7C2-46E9-9227-66E6ECE676A8",
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 447, DateTimeKind.Local).AddTicks(9779),
                            IsDelete = false,
                            OrderStatus = 0,
                            OrderTokenQR = "1231212QR",
                            StoreID = new Guid("ef443e4b-886c-4c06-8528-51e9cf623867"),
                            TotalPrice = 0.0,
                            TripID = new Guid("823ad122-7b51-4dab-9d37-b0f238d4a2ff")
                        },
                        new
                        {
                            Id = new Guid("d68ee4e5-980e-4ec7-8060-df214d458c79"),
                            ApplicationUserID = "E6DE8827-B7C2-46E9-9227-66E6ECE676A8",
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 447, DateTimeKind.Local).AddTicks(9790),
                            IsDelete = false,
                            OrderStatus = 0,
                            OrderTokenQR = "11789212QR",
                            StoreID = new Guid("aa2610a8-de94-42b7-b12b-1cf8710e05d8"),
                            TotalPrice = 0.0,
                            TripID = new Guid("9c2ab923-4c57-44d7-9c1a-b44c0d3e6b00")
                        },
                        new
                        {
                            Id = new Guid("814860c5-ab72-4605-bb47-7e78c78d6fb0"),
                            ApplicationUserID = "E6DE8827-B7C2-46E9-9227-66E6ECE676A8",
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 447, DateTimeKind.Local).AddTicks(9795),
                            IsDelete = false,
                            OrderStatus = 0,
                            OrderTokenQR = "1231212QR",
                            StoreID = new Guid("d3599df7-877e-41c7-832d-14850e5c88bd"),
                            TotalPrice = 0.0,
                            TripID = new Guid("27421cac-1da7-4df8-9928-7fb636ca42aa")
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quanity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderDetail");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f6d015a9-d5bb-40e8-a287-623f0af19fc9"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(51),
                            IsDelete = false,
                            OrderID = new Guid("a8af2f67-447f-4f70-b660-4dd08fa47d4d"),
                            Price = 60000.0,
                            ProductID = new Guid("e802b6c5-f08e-4eff-b7e7-af95514b4341"),
                            Quanity = 2
                        },
                        new
                        {
                            Id = new Guid("a8b7026d-5def-44ef-9666-6b78682a77cc"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(130),
                            IsDelete = false,
                            OrderID = new Guid("d68ee4e5-980e-4ec7-8060-df214d458c79"),
                            Price = 30000.0,
                            ProductID = new Guid("43203ce4-d82c-4c78-8794-2aef22d7ec5b"),
                            Quanity = 1
                        },
                        new
                        {
                            Id = new Guid("05a027a2-01b0-40d2-91f7-2a33fc29753f"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(138),
                            IsDelete = false,
                            OrderID = new Guid("814860c5-ab72-4605-bb47-7e78c78d6fb0"),
                            Price = 125000.0,
                            ProductID = new Guid("4c9ec4b9-1c16-4c7a-90bf-d620aab257b6"),
                            Quanity = 1
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.PaymentHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VnPayResponseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentHistory");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod");

                    b.HasData(
                        new
                        {
                            Id = new Guid("71b4bf27-e569-47a0-b16a-e484533bd9f2"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(414),
                            IsDelete = false,
                            PaymentMethodName = "thanh toán tiền mặt"
                        },
                        new
                        {
                            Id = new Guid("7db43916-e061-42cb-b0a7-9734423d00cd"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(420),
                            IsDelete = false,
                            PaymentMethodName = "thanh toán ngân hàng"
                        },
                        new
                        {
                            Id = new Guid("47bd4dd4-3fb4-463e-b9b9-5ebfb7e1f960"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(424),
                            IsDelete = false,
                            PaymentMethodName = "thanh toán qua momo"
                        },
                        new
                        {
                            Id = new Guid("36672051-5437-4d2c-a42e-c71a9b67a2b1"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(427),
                            IsDelete = false,
                            PaymentMethodName = "thanh toán trên app MetroPickUp"
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryID");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = new Guid("45da4260-ba13-489b-995a-1f6adb13ab75"),
                            CategoryID = new Guid("175d4c8d-d2f0-441b-85cb-45a1cb0b6756"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(673),
                            Image = "https://firebasestorage.googleapis.com/v0/b/metrofood-ab636.appspot.com/o/k%E1%BA%B9o%20b%C3%B4ng%20g%C3%B2n.jpg?alt=media&token=bfa15235-90f4-498e-b305-68ca0d0c9943&_gl=1*1bh2z2a*_ga*NjAxOTEyNDY1LjE2OTQ0MTkxMzc.*_ga_CW55HF8NVT*MTY5OTI4MDg2NS4yMS4xLjE2OTkyODE3NTEuNDAuMC4w",
                            IsDelete = false,
                            Price = 5000.5,
                            ProductDescription = "Kẹo thơm ngon được tạo ra từ các loại đường, được làm nóng và tạo nên hương vị ngọt ngào",
                            ProductName = "Keo bông gòn"
                        },
                        new
                        {
                            Id = new Guid("7d661a30-e180-498c-9a77-cb6112a7cb22"),
                            CategoryID = new Guid("175d4c8d-d2f0-441b-85cb-45a1cb0b6756"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(684),
                            Image = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRgRlQzLWTXBOHfbDD7NnZleCaXH0xyMjPdQQ&usqp=CAU",
                            IsDelete = false,
                            Price = 3000.0,
                            ProductDescription = "Kẹo lạc thơm ngon, giòn tan",
                            ProductName = "Kẹo lạc"
                        },
                        new
                        {
                            Id = new Guid("7da34092-5747-42b7-b059-4a5aad57e740"),
                            CategoryID = new Guid("175d4c8d-d2f0-441b-85cb-45a1cb0b6756"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(690),
                            Image = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT4WKJkaumJIGoZ2SdHjV_gOlqBc1BRCgacPQ&usqp=CAU",
                            IsDelete = false,
                            Price = 3000.0,
                            ProductDescription = "Kẹo lạc thơm ngon, giòn tan",
                            ProductName = "Kẹo chup"
                        },
                        new
                        {
                            Id = new Guid("b834cf11-cc28-4e7d-9846-2acc8ad33d8c"),
                            CategoryID = new Guid("8908ea98-b421-420b-9634-03ed356bb921"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(695),
                            Image = "https://firebasestorage.googleapis.com/v0/b/metrofood-ab636.appspot.com/o/khoai%20t%C3%A2y%20chi%C3%AAn.jpg?alt=media&token=2d6af011-8f6b-4f6f-9749-7c2885ef00d3&_gl=1*165nmqq*_ga*NjAxOTEyNDY1LjE2OTQ0MTkxMzc.*_ga_CW55HF8NVT*MTY5OTI4MDg2NS4yMS4xLjE2OTkyODE3MzEuNjAuMC4w",
                            IsDelete = false,
                            Price = 10000.0,
                            ProductDescription = "Khoai tây chiên giòn tan",
                            ProductName = "Khoai tây chiên"
                        },
                        new
                        {
                            Id = new Guid("6d60bf44-b775-4d87-bb47-aace85d49ac4"),
                            CategoryID = new Guid("175d4c8d-d2f0-441b-85cb-45a1cb0b6756"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(701),
                            Image = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR8-8BIO05l5p1gp2W5sgCgVLLr1YG6dt4gvw&usqp=CAU",
                            IsDelete = false,
                            Price = 2500.0,
                            ProductDescription = "Kẹo dẻo mềm, đàn hồi",
                            ProductName = "Kẹo dẻo"
                        },
                        new
                        {
                            Id = new Guid("1616cc05-8c82-4f8b-a6e0-f60ab3de0d38"),
                            CategoryID = new Guid("9afcdfac-1a27-496b-84e5-0c8e5804e40e"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(706),
                            Image = "https://firebasestorage.googleapis.com/v0/b/metrofood-ab636.appspot.com/o/v%E1%BB%8Bt%20n%C6%B0%E1%BB%9Bng.jpg?alt=media&token=b040622b-edac-4823-9a54-0b1aac95dddc&_gl=1*ykk2i6*_ga*NjAxOTEyNDY1LjE2OTQ0MTkxMzc.*_ga_CW55HF8NVT*MTY5OTI4MDg2NS4yMS4xLjE2OTkyODE5NDYuNDQuMC4w",
                            IsDelete = false,
                            Price = 230000.0,
                            ProductDescription = "vịt nướng thơm ngon",
                            ProductName = "vịt nướng"
                        },
                        new
                        {
                            Id = new Guid("d4fe048d-ff12-4715-93e7-3250f49c15c8"),
                            CategoryID = new Guid("9b2cccb2-f5fa-4358-8265-0fe4f7a52253"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(712),
                            Image = "https://firebasestorage.googleapis.com/v0/b/metrofood-ab636.appspot.com/o/tr%C3%A1i%20c%C3%A2y%20s%E1%BA%A5y.jpg?alt=media&token=934c1049-364c-4947-985b-688b06bd2451&_gl=1*1rimqyr*_ga*NjAxOTEyNDY1LjE2OTQ0MTkxMzc.*_ga_CW55HF8NVT*MTY5OTI4MDg2NS4yMS4xLjE2OTkyODE5NDEuNDkuMC4w",
                            IsDelete = false,
                            Price = 5000.0,
                            ProductDescription = "trái cây sấy giòn tan trong miệng",
                            ProductName = "trái cây sấy"
                        },
                        new
                        {
                            Id = new Guid("f31c789c-4a46-45c7-9009-d36681d788c5"),
                            CategoryID = new Guid("4078ef19-ba53-481d-9c5a-1c37dfe0e0dc"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(717),
                            Image = "https://firebasestorage.googleapis.com/v0/b/metrofood-ab636.appspot.com/o/tr%C3%A0%20s%E1%BB%AFa%20tr%C3%A2n%20ch%C3%A2u%20%C4%91%C6%B0%E1%BB%9Dng%20%C4%91en.jpg?alt=media&token=d88eae6c-2da9-40c1-9a1a-3ce1cffeddc1&_gl=1*dhxzv6*_ga*NjAxOTEyNDY1LjE2OTQ0MTkxMzc.*_ga_CW55HF8NVT*MTY5OTI4MDg2NS4yMS4xLjE2OTkyODE5MTcuMTAuMC4w",
                            IsDelete = false,
                            Price = 10000.0,
                            ProductDescription = "trà sữa sô cô la ngọt thanh",
                            ProductName = "trà sữa"
                        },
                        new
                        {
                            Id = new Guid("4ecd72e3-f43d-490f-8b46-8e92ea29f85c"),
                            CategoryID = new Guid("4078ef19-ba53-481d-9c5a-1c37dfe0e0dc"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(721),
                            Image = "https://firebasestorage.googleapis.com/v0/b/metrofood-ab636.appspot.com/o/sinh%20t%E1%BB%91%20b%C6%A1.jpg?alt=media&token=790ace46-99c9-4c33-b179-3778a1a2b9e8&_gl=1*1dyuw6p*_ga*NjAxOTEyNDY1LjE2OTQ0MTkxMzc.*_ga_CW55HF8NVT*MTY5OTI4MDg2NS4yMS4xLjE2OTkyODE4NDEuMTkuMC4w",
                            IsDelete = false,
                            Price = 15000.0,
                            ProductDescription = "sinh tố bơ dâu tây thơm ngon",
                            ProductName = "sinh tố bơ"
                        },
                        new
                        {
                            Id = new Guid("0c308b93-b26a-4224-9d63-28294711aa15"),
                            CategoryID = new Guid("9afcdfac-1a27-496b-84e5-0c8e5804e40e"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(729),
                            Image = "https://firebasestorage.googleapis.com/v0/b/metrofood-ab636.appspot.com/o/g%C3%A0%20r%C3%A1n.jpg?alt=media&token=7124c118-a77e-49b7-b589-bff2880072c6&_gl=1*10iygcf*_ga*NjAxOTEyNDY1LjE2OTQ0MTkxMzc.*_ga_CW55HF8NVT*MTY5OTI4MDg2NS4yMS4xLjE2OTkyODE3MTIuMTAuMC4w",
                            IsDelete = false,
                            Price = 50000.0,
                            ProductDescription = "Gà rán giòn tan thơm ngon",
                            ProductName = "Gà rán"
                        },
                        new
                        {
                            Id = new Guid("107f1f75-b23b-4bc4-92d7-f2e90d067d1f"),
                            CategoryID = new Guid("9afcdfac-1a27-496b-84e5-0c8e5804e40e"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(733),
                            Image = "https://firebasestorage.googleapis.com/v0/b/metrofood-ab636.appspot.com/o/sandwich.jpg?alt=media&token=da94c867-c82b-4f87-9d71-9a42d7720e04&_gl=1*1eghpk1*_ga*NjAxOTEyNDY1LjE2OTQ0MTkxMzc.*_ga_CW55HF8NVT*MTY5OTI4MDg2NS4yMS4xLjE2OTkyODE4NDguMTIuMC4w",
                            IsDelete = false,
                            Price = 25000.0,
                            ProductDescription = "sandwich ngon ngon",
                            ProductName = "sandwich"
                        },
                        new
                        {
                            Id = new Guid("55265d3b-fa02-4e09-84db-d4e8c8a9a9b5"),
                            CategoryID = new Guid("4078ef19-ba53-481d-9c5a-1c37dfe0e0dc"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(737),
                            Image = "https://firebasestorage.googleapis.com/v0/b/metrofood-ab636.appspot.com/o/sinh%20t%E1%BB%91%20m%C3%A3ng%20c%E1%BA%A7u.jpg?alt=media&token=50c23ce0-ec9e-45bf-a1d6-7839d9b72966&_gl=1*1ek709c*_ga*NjAxOTEyNDY1LjE2OTQ0MTkxMzc.*_ga_CW55HF8NVT*MTY5OTI4MDg2NS4yMS4xLjE2OTkyODE4MjAuNDAuMC4w",
                            IsDelete = false,
                            Price = 25000.0,
                            ProductDescription = "sinh tố mãng cầu mát lạnh",
                            ProductName = "sinh tố mãng cầu"
                        },
                        new
                        {
                            Id = new Guid("ffb05663-954d-4af3-8a41-91af39446f81"),
                            CategoryID = new Guid("175d4c8d-d2f0-441b-85cb-45a1cb0b6756"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(741),
                            Image = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQxu7OGjZjXXrJHyR6o_v7PSl4Q9PEGKxOfEQ&usqp=CAU",
                            IsDelete = false,
                            Price = 2500.0,
                            ProductDescription = "Kẹo mút mềm dẻo",
                            ProductName = "Kẹo mút"
                        },
                        new
                        {
                            Id = new Guid("4c9ec4b9-1c16-4c7a-90bf-d620aab257b6"),
                            CategoryID = new Guid("9afcdfac-1a27-496b-84e5-0c8e5804e40e"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(745),
                            Image = "https://firebasestorage.googleapis.com/v0/b/metrofood-ab636.appspot.com/o/g%C3%A0%20n%C6%B0%E1%BB%9Bng%20mu%E1%BB%91i%20%E1%BB%9Bt.jpg?alt=media&token=b0ee7b37-0c08-4275-8b4d-52113060cce1&_gl=1*jik9qm*_ga*NjAxOTEyNDY1LjE2OTQ0MTkxMzc.*_ga_CW55HF8NVT*MTY5OTI4MDg2NS4yMS4xLjE2OTkyODE2NzguNDQuMC4w",
                            IsDelete = false,
                            Price = 80000.0,
                            ProductDescription = "gà nướng muối ớt thơm phức",
                            ProductName = "gà nướng muối ớt"
                        },
                        new
                        {
                            Id = new Guid("35819f39-bca6-49df-828d-f861f888b985"),
                            CategoryID = new Guid("9afcdfac-1a27-496b-84e5-0c8e5804e40e"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(750),
                            Image = "https://firebasestorage.googleapis.com/v0/b/metrofood-ab636.appspot.com/o/g%C3%A0%20quay.jpg?alt=media&token=92dd0724-9117-41db-9129-ff9198ee957b&_gl=1*1rost1c*_ga*NjAxOTEyNDY1LjE2OTQ0MTkxMzc.*_ga_CW55HF8NVT*MTY5OTI4MDg2NS4yMS4xLjE2OTkyODE2OTMuMjkuMC4w",
                            IsDelete = false,
                            Price = 90000.0,
                            ProductDescription = "gà quay thơm phức",
                            ProductName = "gà quay"
                        },
                        new
                        {
                            Id = new Guid("43203ce4-d82c-4c78-8794-2aef22d7ec5b"),
                            CategoryID = new Guid("9afcdfac-1a27-496b-84e5-0c8e5804e40e"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(755),
                            Image = "https://firebasestorage.googleapis.com/v0/b/metrofood-ab636.appspot.com/o/c%C6%A1m%20chi%C3%AAn.jpg?alt=media&token=566c478b-4b30-4ba1-b33b-c79b48979b2a&_gl=1*1ffrh5g*_ga*NjAxOTEyNDY1LjE2OTQ0MTkxMzc.*_ga_CW55HF8NVT*MTY5OTI4MDg2NS4yMS4xLjE2OTkyODE2MzMuMjkuMC4w",
                            IsDelete = false,
                            Price = 25000.0,
                            ProductDescription = "Cơm chiên dương châu thơm ngon",
                            ProductName = "Cơm chiên dương châu"
                        },
                        new
                        {
                            Id = new Guid("9f7798d8-10df-4783-b825-b27d2023d347"),
                            CategoryID = new Guid("9afcdfac-1a27-496b-84e5-0c8e5804e40e"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(758),
                            Image = "https://firebasestorage.googleapis.com/v0/b/metrofood-ab636.appspot.com/o/c%C6%A1m%20n%E1%BA%A5m.jpg?alt=media&token=b8a9cf42-0a22-4336-8a84-cabac450f5fa&_gl=1*1d5cihv*_ga*NjAxOTEyNDY1LjE2OTQ0MTkxMzc.*_ga_CW55HF8NVT*MTY5OTI4MDg2NS4yMS4xLjE2OTkyODE2NDguMTQuMC4w",
                            IsDelete = false,
                            Price = 19000.0,
                            ProductDescription = "cơm nấm thơm ngon",
                            ProductName = "cơm nấm"
                        },
                        new
                        {
                            Id = new Guid("e802b6c5-f08e-4eff-b7e7-af95514b4341"),
                            CategoryID = new Guid("4078ef19-ba53-481d-9c5a-1c37dfe0e0dc"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(766),
                            Image = "https://firebasestorage.googleapis.com/v0/b/metrofood-ab636.appspot.com/o/tr%C3%A0%20chanh%20.jpg?alt=media&token=531d6da6-9098-4532-a547-96ce4a376f2f&_gl=1*1v8uv0r*_ga*NjAxOTEyNDY1LjE2OTQ0MTkxMzc.*_ga_CW55HF8NVT*MTY5OTI4MDg2NS4yMS4xLjE2OTkyODE4NjcuNjAuMC4w",
                            IsDelete = false,
                            Price = 25000.0,
                            ProductDescription = "Trà chanh, uống là ghiền!!!",
                            ProductName = "trà chanh"
                        },
                        new
                        {
                            Id = new Guid("315b5b06-546c-45c5-be94-62e7b08965b9"),
                            CategoryID = new Guid("b7a3a853-73c6-4f02-913b-9765019e9bd0"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(770),
                            Image = "https://firebasestorage.googleapis.com/v0/b/metrofood-ab636.appspot.com/o/b%C3%A1nh%20cu%E1%BB%91n.jpg?alt=media&token=04ae26bd-7eb5-472b-acdf-1c1644f05908&_gl=1*ntrrnv*_ga*NjAxOTEyNDY1LjE2OTQ0MTkxMzc.*_ga_CW55HF8NVT*MTY5OTI4MDg2NS4yMS4xLjE2OTkyODEwNTQuNS4wLjA.",
                            IsDelete = false,
                            Price = 25000.0,
                            ProductDescription = "Bánh cuốn siêu topping thịt trứng cút, ăn là ghiền!!!",
                            ProductName = "bánh cuốn"
                        },
                        new
                        {
                            Id = new Guid("09955444-1d34-43cb-aeb4-2af974f05847"),
                            CategoryID = new Guid("b7a3a853-73c6-4f02-913b-9765019e9bd0"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(774),
                            Image = "https://firebasestorage.googleapis.com/v0/b/metrofood-ab636.appspot.com/o/b%C3%A1nh%20m%C3%AC%20ch%E1%BA%A3%20l%E1%BB%A5a.jpg?alt=media&token=939bb3f4-7236-4a33-99d2-2fda0843c529&_gl=1*1leh2mz*_ga*NjAxOTEyNDY1LjE2OTQ0MTkxMzc.*_ga_CW55HF8NVT*MTY5OTI4MDg2NS4yMS4xLjE2OTkyODEzODEuNTIuMC4w",
                            IsDelete = false,
                            Price = 25000.0,
                            ProductDescription = "bánh mì chả lụa siêu topping thịt trứng cút, ăn là ghiền!!!",
                            ProductName = "bánh mì chả lụa"
                        },
                        new
                        {
                            Id = new Guid("2f2c8c92-e8fe-4687-8b07-a3266edcec95"),
                            CategoryID = new Guid("b7a3a853-73c6-4f02-913b-9765019e9bd0"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(785),
                            Image = "https://firebasestorage.googleapis.com/v0/b/metrofood-ab636.appspot.com/o/b%C3%A1nh%20m%C3%AC%20kh%C3%B4%20g%C3%A0.jpg?alt=media&token=ed098e6f-cdd6-4073-9e54-18246793bcb5&_gl=1*17fps7l*_ga*NjAxOTEyNDY1LjE2OTQ0MTkxMzc.*_ga_CW55HF8NVT*MTY5OTI4MDg2NS4yMS4xLjE2OTkyODE0MjcuNi4wLjA.",
                            IsDelete = false,
                            Price = 25000.0,
                            ProductDescription = "bánh mì khô gà siêu topping thịt trứng cút, ăn là ghiền!!!",
                            ProductName = "bánh mì khô gà"
                        },
                        new
                        {
                            Id = new Guid("6d9d1080-424e-435e-91ee-7d094dbae04b"),
                            CategoryID = new Guid("b7a3a853-73c6-4f02-913b-9765019e9bd0"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(790),
                            Image = "https://firebasestorage.googleapis.com/v0/b/metrofood-ab636.appspot.com/o/b%C3%A1nh%20m%C3%AC%20nh%E1%BA%ADn.jpg?alt=media&token=ab5d5464-752e-4eaf-9a53-8a8ed21a472b&_gl=1*133ff4j*_ga*NjAxOTEyNDY1LjE2OTQ0MTkxMzc.*_ga_CW55HF8NVT*MTY5OTI4MDg2NS4yMS4xLjE2OTkyODE0NDQuNjAuMC4w",
                            IsDelete = false,
                            Price = 25000.0,
                            ProductDescription = "bánh mì thịt siêu topping thịt trứng cút, ăn là ghiền!!!",
                            ProductName = "bánh mì thịt"
                        },
                        new
                        {
                            Id = new Guid("dd1655de-7493-4b65-8c92-fad2275a3ec9"),
                            CategoryID = new Guid("b7a3a853-73c6-4f02-913b-9765019e9bd0"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(795),
                            Image = "https://firebasestorage.googleapis.com/v0/b/metrofood-ab636.appspot.com/o/b%C3%A1nh%20m%C3%AC%20tr%E1%BB%A9ng.jpg?alt=media&token=67e9bd91-80d8-49cd-8413-166c99806d5c&_gl=1*ajhxeb*_ga*NjAxOTEyNDY1LjE2OTQ0MTkxMzc.*_ga_CW55HF8NVT*MTY5OTI4MDg2NS4yMS4xLjE2OTkyODE1MzUuNjAuMC4w",
                            IsDelete = false,
                            Price = 25000.0,
                            ProductDescription = "bánh mì trứng topping thịt trứng cút, ăn là ghiền!!!",
                            ProductName = "bánh mì trứng"
                        },
                        new
                        {
                            Id = new Guid("1d8bd70c-7eec-4630-b297-729d81467d28"),
                            CategoryID = new Guid("b7a3a853-73c6-4f02-913b-9765019e9bd0"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(799),
                            Image = "https://firebasestorage.googleapis.com/v0/b/metrofood-ab636.appspot.com/o/b%C3%A1nh%20m%C3%AC%20x%C3%A1%20x%C3%ADu.jpg?alt=media&token=f6baaee9-fdc2-42bb-93e6-d25426686461&_gl=1*stg2d2*_ga*NjAxOTEyNDY1LjE2OTQ0MTkxMzc.*_ga_CW55HF8NVT*MTY5OTI4MDg2NS4yMS4xLjE2OTkyODE1NDcuNDguMC4w",
                            IsDelete = false,
                            Price = 25000.0,
                            ProductDescription = "bánh mì xá xiu topping thịt trứng cút, ăn là ghiền!!!",
                            ProductName = "bánh mì xá xiu"
                        },
                        new
                        {
                            Id = new Guid("18d806c4-c26f-4042-8254-c2fc8af3a3fc"),
                            CategoryID = new Guid("9afcdfac-1a27-496b-84e5-0c8e5804e40e"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(805),
                            Image = "https://firebasestorage.googleapis.com/v0/b/metrofood-ab636.appspot.com/o/b%C3%A1nh%20%C6%B0%E1%BB%9Bt.jpg?alt=media&token=81f658b4-bf13-4f9e-8eea-59d2eaf42b6d&_gl=1*1b4idwu*_ga*NjAxOTEyNDY1LjE2OTQ0MTkxMzc.*_ga_CW55HF8NVT*MTY5OTI4MDg2NS4yMS4xLjE2OTkyODE1NjMuMzIuMC4w",
                            IsDelete = false,
                            Price = 25000.0,
                            ProductDescription = "bánh ướt topping thịt trứng cút, ăn là ghiền!!!",
                            ProductName = "bánh ướt"
                        },
                        new
                        {
                            Id = new Guid("7292efb8-15bf-404c-bad0-128991819f7a"),
                            CategoryID = new Guid("4078ef19-ba53-481d-9c5a-1c37dfe0e0dc"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(811),
                            Image = "https://firebasestorage.googleapis.com/v0/b/metrofood-ab636.appspot.com/o/b%E1%BA%A1c%20x%E1%BB%89u.jpg?alt=media&token=c638c3a8-b5e5-4a53-8b43-2444e6759b4e&_gl=1*z64tep*_ga*NjAxOTEyNDY1LjE2OTQ0MTkxMzc.*_ga_CW55HF8NVT*MTY5OTI4MDg2NS4yMS4xLjE2OTkyODE1ODkuNi4wLjA.",
                            IsDelete = false,
                            Price = 20000.0,
                            ProductDescription = "bạc xỉu thơm phức, uống là ghiền!!!",
                            ProductName = "bạc xỉu"
                        },
                        new
                        {
                            Id = new Guid("8108e3ca-e67a-415c-94a8-673917e29b1b"),
                            CategoryID = new Guid("4078ef19-ba53-481d-9c5a-1c37dfe0e0dc"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(867),
                            Image = "https://firebasestorage.googleapis.com/v0/b/metrofood-ab636.appspot.com/o/c%C3%A0%20ph%C3%AA%20mu%E1%BB%91i.jpg?alt=media&token=fbd2e24d-9db6-45ed-b641-04f42576d46c&_gl=1*1qr7ux3*_ga*NjAxOTEyNDY1LjE2OTQ0MTkxMzc.*_ga_CW55HF8NVT*MTY5OTI4MDg2NS4yMS4xLjE2OTkyODE2MDIuNjAuMC4w",
                            IsDelete = false,
                            Price = 18000.0,
                            ProductDescription = "cà phê muối thơm phức, uống là ghiền!!!",
                            ProductName = "cà phê muối"
                        },
                        new
                        {
                            Id = new Guid("9ca658d0-f207-43b4-9adb-946f5c0506d5"),
                            CategoryID = new Guid("4078ef19-ba53-481d-9c5a-1c37dfe0e0dc"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(876),
                            Image = "https://firebasestorage.googleapis.com/v0/b/metrofood-ab636.appspot.com/o/c%C3%A0%20ph%C3%AA%20s%E1%BB%AFa.jpg?alt=media&token=9bd6dae8-b648-41a7-a2ee-7929dc4cb906&_gl=1*o2kslq*_ga*NjAxOTEyNDY1LjE2OTQ0MTkxMzc.*_ga_CW55HF8NVT*MTY5OTI4MDg2NS4yMS4xLjE2OTkyODE2MjAuNDIuMC4w",
                            IsDelete = false,
                            Price = 15000.0,
                            ProductDescription = "cà phê sữa thơm phức, uống là ghiền!!!",
                            ProductName = "cà phê sữa"
                        },
                        new
                        {
                            Id = new Guid("ac9f9657-e5ed-4e92-8ee7-3028df33f98b"),
                            CategoryID = new Guid("4078ef19-ba53-481d-9c5a-1c37dfe0e0dc"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(881),
                            Image = "https://firebasestorage.googleapis.com/v0/b/metrofood-ab636.appspot.com/o/expresso.jpg?alt=media&token=c5d7f433-e733-4c7e-b1ff-2a3496145a9e&_gl=1*adgji4*_ga*NjAxOTEyNDY1LjE2OTQ0MTkxMzc.*_ga_CW55HF8NVT*MTY5OTI4MDg2NS4yMS4xLjE2OTkyODE2NjIuNjAuMC4w",
                            IsDelete = false,
                            Price = 15000.0,
                            ProductDescription = "expresso thơm phức, uống là ghiền!!!",
                            ProductName = "expresso"
                        },
                        new
                        {
                            Id = new Guid("ac5a5d34-5a6b-4013-a850-d19a5bf9a659"),
                            CategoryID = new Guid("4078ef19-ba53-481d-9c5a-1c37dfe0e0dc"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(887),
                            Image = "https://firebasestorage.googleapis.com/v0/b/metrofood-ab636.appspot.com/o/n%C6%B0%E1%BB%9Bc%20%C3%A9p%20cam.jpg?alt=media&token=d0fbb985-ca14-488c-99e2-2663e0306676&_gl=1*1bdx014*_ga*NjAxOTEyNDY1LjE2OTQ0MTkxMzc.*_ga_CW55HF8NVT*MTY5OTI4MDg2NS4yMS4xLjE2OTkyODE3NzguMTMuMC4w",
                            IsDelete = false,
                            Price = 15000.0,
                            ProductDescription = "nước ép cam thơm phức, uống là ghiền!!!",
                            ProductName = "nước ép cam"
                        },
                        new
                        {
                            Id = new Guid("e1fe83d3-270f-408e-98b2-0af436c510b9"),
                            CategoryID = new Guid("4078ef19-ba53-481d-9c5a-1c37dfe0e0dc"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(892),
                            Image = "https://firebasestorage.googleapis.com/v0/b/metrofood-ab636.appspot.com/o/n%C6%B0%E1%BB%9Bc%20%C3%A9p%20d%C6%B0a%20h%E1%BA%A5u.jpg?alt=media&token=91ce4a1c-4db6-43e0-af43-ee62e0a0d492&_gl=1*14wa5cu*_ga*NjAxOTEyNDY1LjE2OTQ0MTkxMzc.*_ga_CW55HF8NVT*MTY5OTI4MDg2NS4yMS4xLjE2OTkyODE3ODcuNC4wLjA.",
                            IsDelete = false,
                            Price = 15000.0,
                            ProductDescription = "nước ep dưa hấu thơm phức, uống là ghiền!!!",
                            ProductName = "nước ep dưa hấu"
                        },
                        new
                        {
                            Id = new Guid("23149dda-19b1-40cf-9023-2ab388f4e2e7"),
                            CategoryID = new Guid("4078ef19-ba53-481d-9c5a-1c37dfe0e0dc"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(896),
                            Image = "https://firebasestorage.googleapis.com/v0/b/metrofood-ab636.appspot.com/o/sinh%20t%E1%BB%91%20d%C3%A2u.jpg?alt=media&token=00b7feac-3084-443b-82b7-25ce815abb06&_gl=1*1yabqww*_ga*NjAxOTEyNDY1LjE2OTQ0MTkxMzc.*_ga_CW55HF8NVT*MTY5OTI4MDg2NS4yMS4xLjE2OTkyODE4MDAuNjAuMC4w",
                            IsDelete = false,
                            Price = 15000.0,
                            ProductDescription = "sinh tố dâu thơm phức, uống là ghiền!!!",
                            ProductName = "sinh tố dâu"
                        },
                        new
                        {
                            Id = new Guid("61a3d1ac-3785-4185-b880-5c92eb995c04"),
                            CategoryID = new Guid("4078ef19-ba53-481d-9c5a-1c37dfe0e0dc"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(900),
                            Image = "https://firebasestorage.googleapis.com/v0/b/metrofood-ab636.appspot.com/o/tr%C3%A0%20tr%C3%A1i%20c%C3%A2y.jpg?alt=media&token=1c94927e-1591-40df-9b19-cbfdea2ab617&_gl=1*1o9pywy*_ga*NjAxOTEyNDY1LjE2OTQ0MTkxMzc.*_ga_CW55HF8NVT*MTY5OTI4MDg2NS4yMS4xLjE2OTkyODE5MzAuNjAuMC4w",
                            IsDelete = false,
                            Price = 15000.0,
                            ProductDescription = "trà trái cây thơm phức, uống là ghiền!!!",
                            ProductName = "trà trái cây"
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Route");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ea675490-eecd-4308-bb71-61b72a9c979f"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(1750),
                            FromLocation = "Quận 1, Tp.Hcm",
                            IsDelete = false,
                            ToLocation = "Quận 9, Tp.Hcm"
                        },
                        new
                        {
                            Id = new Guid("001a254c-02d4-40e7-a01f-95f393fb41ef"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(1755),
                            FromLocation = "Quận 1, Tp.Hcm",
                            IsDelete = false,
                            ToLocation = "Suối Tiên, Đồng Nai"
                        },
                        new
                        {
                            Id = new Guid("a437b242-55fc-4146-a2b9-8c952b107e3a"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(1758),
                            FromLocation = "Quận 1, Tp.Hcm",
                            IsDelete = false,
                            ToLocation = "Quận Thủ Đức, Tp.Hcm"
                        },
                        new
                        {
                            Id = new Guid("ccc66514-0597-4d43-aaff-0c5d8ee59ffa"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(1761),
                            FromLocation = "Quận 1, Tp.Hcm",
                            IsDelete = false,
                            ToLocation = "Quận Bình Thạnh, Tp.Hcm"
                        },
                        new
                        {
                            Id = new Guid("b9f8f712-92ee-4611-ad55-000a8e1b84c6"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(1765),
                            FromLocation = "Quận 1, Tp.Hcm",
                            IsDelete = false,
                            ToLocation = "Bến xe Miền Đông"
                        },
                        new
                        {
                            Id = new Guid("42f184eb-58b3-4b9b-be52-1da57f8ffb3f"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(1768),
                            FromLocation = "Quận Bình Thạnh",
                            IsDelete = false,
                            ToLocation = "Bến Thành, Quận 1, TP HCM"
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Route_Station", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RouteID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan?>("StopTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("RouteID");

                    b.HasIndex("StationID");

                    b.ToTable("Route_Station");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6e841857-2712-4da3-a15f-aed820adef5a"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(1359),
                            Duration = new TimeSpan(0, 0, 30, 0, 0),
                            Index = 2,
                            IsDelete = false,
                            RouteID = new Guid("ea675490-eecd-4308-bb71-61b72a9c979f"),
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c7"),
                            StopTime = new TimeSpan(0, 1, 30, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("1b22bdb7-1688-42fa-8fae-4af92e32df7f"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(1387),
                            Duration = new TimeSpan(0, 0, 30, 0, 0),
                            Index = 1,
                            IsDelete = false,
                            RouteID = new Guid("ccc66514-0597-4d43-aaff-0c5d8ee59ffa"),
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c5"),
                            StopTime = new TimeSpan(0, 0, 30, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("2ff9d0d9-474c-4466-b9a8-707b730f415c"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(1401),
                            Duration = new TimeSpan(0, 0, 30, 0, 0),
                            Index = 1,
                            IsDelete = false,
                            RouteID = new Guid("a437b242-55fc-4146-a2b9-8c952b107e3a"),
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c5"),
                            StopTime = new TimeSpan(0, 1, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("ab2099b4-e511-42ff-9e6a-ee71bddcd482"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(1414),
                            Duration = new TimeSpan(0, 0, 30, 0, 0),
                            Index = 1,
                            IsDelete = false,
                            RouteID = new Guid("001a254c-02d4-40e7-a01f-95f393fb41ef"),
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c5"),
                            StopTime = new TimeSpan(0, 2, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("15fefdbf-b178-49ba-aa7c-7b3e2dd575bc"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(1427),
                            Duration = new TimeSpan(0, 1, 0, 0, 0),
                            Index = 2,
                            IsDelete = false,
                            RouteID = new Guid("001a254c-02d4-40e7-a01f-95f393fb41ef"),
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c6"),
                            StopTime = new TimeSpan(0, 2, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("8de6ed00-50c8-434e-95ce-cc921426e697"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(1440),
                            Duration = new TimeSpan(0, 1, 30, 0, 0),
                            Index = 3,
                            IsDelete = false,
                            RouteID = new Guid("001a254c-02d4-40e7-a01f-95f393fb41ef"),
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c7"),
                            StopTime = new TimeSpan(0, 2, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("6a82db5a-23cf-4764-b7d1-ccabce5cc317"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(1454),
                            Duration = new TimeSpan(0, 1, 40, 0, 0),
                            Index = 3,
                            IsDelete = false,
                            RouteID = new Guid("b9f8f712-92ee-4611-ad55-000a8e1b84c6"),
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c9"),
                            StopTime = new TimeSpan(0, 3, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("5004477e-1446-467d-8157-972185d64290"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(1466),
                            Duration = new TimeSpan(0, 0, 40, 0, 0),
                            Index = 0,
                            IsDelete = false,
                            RouteID = new Guid("42f184eb-58b3-4b9b-be52-1da57f8ffb3f"),
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c4"),
                            StopTime = new TimeSpan(0, 0, 40, 0, 0)
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Station", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StoreID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StoreID")
                        .IsUnique();

                    b.ToTable("Station");

                    b.HasData(
                        new
                        {
                            Id = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c4"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(2612),
                            IsDelete = false,
                            StationName = "Ga Metro Bến Thành",
                            StoreID = new Guid("aa2610a8-de94-42b7-b12b-1cf8710e05d8")
                        },
                        new
                        {
                            Id = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c5"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(2619),
                            IsDelete = false,
                            StationName = "Ga Metro Vincom Bình Thạnh",
                            StoreID = new Guid("d3599df7-877e-41c7-832d-14850e5c88bd")
                        },
                        new
                        {
                            Id = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c6"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(2623),
                            IsDelete = false,
                            StationName = "Ga Metro Chợ Thủ Đức",
                            StoreID = new Guid("2f3eee35-1b8e-43af-956f-eacd94eea7cd")
                        },
                        new
                        {
                            Id = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c7"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(2628),
                            IsDelete = false,
                            StationName = "Ga Metro Khu Công Nghệ Cao",
                            StoreID = new Guid("70c6a937-f285-4495-8407-b20a0c9b10f3")
                        },
                        new
                        {
                            Id = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c8"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(2632),
                            IsDelete = false,
                            StationName = "Ga Metro Suối Tiên",
                            StoreID = new Guid("ef443e4b-886c-4c06-8528-51e9cf623867")
                        },
                        new
                        {
                            Id = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c9"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(2640),
                            IsDelete = false,
                            StationName = "Ga Metro Bến xe Miền Đông",
                            StoreID = new Guid("6507b7db-7255-4274-87a4-6e2dc3d8a3c4")
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Station_Trip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Arrived")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TripID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StationID");

                    b.HasIndex("TripID");

                    b.ToTable("Station_Trip");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0ef38e07-97ac-4ad6-a7c3-553c9bed4e22"),
                            Arrived = new DateTime(2023, 7, 17, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(2016),
                            IsDelete = false,
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c7"),
                            TripID = new Guid("823ad122-7b51-4dab-9d37-b0f238d4a2ff")
                        },
                        new
                        {
                            Id = new Guid("346fc00d-47fd-40de-b125-472b5002f7d2"),
                            Arrived = new DateTime(2023, 9, 15, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(2177),
                            IsDelete = false,
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c6"),
                            TripID = new Guid("02859382-d88c-4e69-8c47-b8e0456677d5")
                        },
                        new
                        {
                            Id = new Guid("99b1e647-d0d1-4ae3-a980-f86387279d9f"),
                            Arrived = new DateTime(2023, 11, 14, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(2201),
                            IsDelete = false,
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c5"),
                            TripID = new Guid("27421cac-1da7-4df8-9928-7fb636ca42aa")
                        },
                        new
                        {
                            Id = new Guid("3372cdcf-3a42-424c-849a-61c2cc593fc5"),
                            Arrived = new DateTime(2023, 12, 23, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(2215),
                            IsDelete = false,
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c8"),
                            TripID = new Guid("5b30c4e9-31ab-456c-b212-dc6b2ba9a3e7")
                        },
                        new
                        {
                            Id = new Guid("80a91c82-aded-4d55-b6db-86eae696e974"),
                            Arrived = new DateTime(2023, 5, 25, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(2228),
                            IsDelete = false,
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c8"),
                            TripID = new Guid("9c2ab923-4c57-44d7-9c1a-b44c0d3e6b00")
                        },
                        new
                        {
                            Id = new Guid("ab8e0d18-1432-4f40-a8d1-c02cd6f25e6d"),
                            Arrived = new DateTime(2023, 5, 26, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(2241),
                            IsDelete = false,
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c6"),
                            TripID = new Guid("9c2ab923-4c57-44d7-9c1a-b44c0d3e6b00")
                        },
                        new
                        {
                            Id = new Guid("9a390caa-8d99-40a0-af42-71599c8c37e6"),
                            Arrived = new DateTime(2023, 6, 16, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(2254),
                            IsDelete = false,
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c5"),
                            TripID = new Guid("9c2ab923-4c57-44d7-9c1a-b44c0d3e6b00")
                        },
                        new
                        {
                            Id = new Guid("ea339036-7458-4e5e-868e-b0a49f0b978b"),
                            Arrived = new DateTime(2023, 6, 16, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(2267),
                            IsDelete = false,
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c6"),
                            TripID = new Guid("9b4d232c-0fda-4ec0-beed-ecd649ee9c52")
                        },
                        new
                        {
                            Id = new Guid("13f33b74-9426-4ab0-ab2f-400aced9a3de"),
                            Arrived = new DateTime(2023, 10, 19, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(2281),
                            IsDelete = false,
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c5"),
                            TripID = new Guid("8a2ba7d5-7019-49c6-a47d-ab0a072e7932")
                        },
                        new
                        {
                            Id = new Guid("e8efc3e8-c5e6-406e-90a1-2e2401071ca2"),
                            Arrived = new DateTime(2023, 10, 19, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(2295),
                            IsDelete = false,
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c6"),
                            TripID = new Guid("8a2ba7d5-7019-49c6-a47d-ab0a072e7932")
                        },
                        new
                        {
                            Id = new Guid("70aa9d7f-8cc1-44cb-8286-37e861f7f2e9"),
                            Arrived = new DateTime(2023, 10, 19, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(2311),
                            IsDelete = false,
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c7"),
                            TripID = new Guid("8a2ba7d5-7019-49c6-a47d-ab0a072e7932")
                        },
                        new
                        {
                            Id = new Guid("a8cc443f-468d-4cbc-8382-8fcc735732dc"),
                            Arrived = new DateTime(2023, 10, 19, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(2324),
                            IsDelete = false,
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c8"),
                            TripID = new Guid("8a2ba7d5-7019-49c6-a47d-ab0a072e7932")
                        },
                        new
                        {
                            Id = new Guid("070eab1c-c66b-439f-8e85-8fc4a898dd1a"),
                            Arrived = new DateTime(2023, 10, 19, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(2338),
                            IsDelete = false,
                            StationID = new Guid("50cb67f8-421e-4aec-85ed-7114e763d6c9"),
                            TripID = new Guid("8a2ba7d5-7019-49c6-a47d-ab0a072e7932")
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("StoreCloseTime")
                        .HasColumnType("time");

                    b.Property<string>("StoreLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("StoreOpenTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Store");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aa2610a8-de94-42b7-b12b-1cf8710e05d8"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(3246),
                            IsDelete = false,
                            StoreCloseTime = new TimeSpan(0, 23, 0, 0, 0),
                            StoreLocation = "Số 2, Đường Lê Lai, Quận 1",
                            StoreName = "Metro PickUp 1",
                            StoreOpenTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("d3599df7-877e-41c7-832d-14850e5c88bd"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(3267),
                            IsDelete = false,
                            StoreCloseTime = new TimeSpan(0, 6, 0, 0, 0),
                            StoreLocation = "Số 3, Vincom, Quận Bình Thạnh",
                            StoreName = "Metro PickUp 2",
                            StoreOpenTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("2f3eee35-1b8e-43af-956f-eacd94eea7cd"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(3278),
                            IsDelete = false,
                            StoreCloseTime = new TimeSpan(0, 6, 0, 0, 0),
                            StoreLocation = "Số 1, Võ Văn Ngân, Thành Phố Thủ Đức",
                            StoreName = "Metro PickUp 3",
                            StoreOpenTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("70c6a937-f285-4495-8407-b20a0c9b10f3"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(3336),
                            IsDelete = false,
                            StoreCloseTime = new TimeSpan(0, 6, 0, 0, 0),
                            StoreLocation = "Khu Công Nghệ Cao Thành Phố Thủ Đức ",
                            StoreName = "Metro PickUp 4",
                            StoreOpenTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("ef443e4b-886c-4c06-8528-51e9cf623867"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(3349),
                            IsDelete = false,
                            StoreCloseTime = new TimeSpan(0, 6, 0, 0, 0),
                            StoreLocation = "Suối tiên",
                            StoreName = "Metro PickUp 5",
                            StoreOpenTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("6507b7db-7255-4274-87a4-6e2dc3d8a3c4"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(3359),
                            IsDelete = false,
                            StoreCloseTime = new TimeSpan(0, 6, 0, 0, 0),
                            StoreLocation = "Bến Xe Miền Đông",
                            StoreName = "Metro PickUp 6",
                            StoreOpenTime = new TimeSpan(0, 6, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Store_Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplyDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Priority")
                        .HasColumnType("bit");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("StoreId");

                    b.ToTable("Store_Menu");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ab90e463-1649-4ddf-857c-9513dca05753"),
                            ApplyDate = "Thursday",
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(2917),
                            IsDelete = false,
                            MenuId = new Guid("5263453c-dae9-45e4-8204-5430a7256cde"),
                            Priority = true,
                            StoreId = new Guid("aa2610a8-de94-42b7-b12b-1cf8710e05d8")
                        },
                        new
                        {
                            Id = new Guid("dd8035b7-38e6-4d22-aa07-ada491c74892"),
                            ApplyDate = "Thursday",
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(2925),
                            IsDelete = false,
                            MenuId = new Guid("d3fd2009-c658-4498-bf59-26936918a0c8"),
                            Priority = false,
                            StoreId = new Guid("aa2610a8-de94-42b7-b12b-1cf8710e05d8")
                        },
                        new
                        {
                            Id = new Guid("c1fa5bea-67fa-47ed-b2a8-a0d5386aa868"),
                            ApplyDate = "Thursday",
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(2928),
                            IsDelete = false,
                            MenuId = new Guid("5263453c-dae9-45e4-8204-5430a7256cde"),
                            Priority = false,
                            StoreId = new Guid("6507b7db-7255-4274-87a4-6e2dc3d8a3c4")
                        },
                        new
                        {
                            Id = new Guid("57280fe3-0a16-485b-b7b3-15df9d67645e"),
                            ApplyDate = "Monday",
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(2932),
                            IsDelete = false,
                            MenuId = new Guid("e7a15238-5db0-49bd-94e6-d5f8b77ae6ce"),
                            Priority = false,
                            StoreId = new Guid("d3599df7-877e-41c7-832d-14850e5c88bd")
                        },
                        new
                        {
                            Id = new Guid("13512a48-4b81-40e5-98d5-3ff4c9878b77"),
                            ApplyDate = "Monday",
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(2936),
                            IsDelete = false,
                            MenuId = new Guid("e7a15238-5db0-49bd-94e6-d5f8b77ae6ce"),
                            Priority = false,
                            StoreId = new Guid("2f3eee35-1b8e-43af-956f-eacd94eea7cd")
                        },
                        new
                        {
                            Id = new Guid("4ac8b23a-fae7-4086-9d2e-1aa8e3b881a1"),
                            ApplyDate = "Monday",
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(2939),
                            IsDelete = false,
                            MenuId = new Guid("e7a15238-5db0-49bd-94e6-d5f8b77ae6ce"),
                            Priority = false,
                            StoreId = new Guid("70c6a937-f285-4495-8407-b20a0c9b10f3")
                        },
                        new
                        {
                            Id = new Guid("89ef5d01-d1ef-4a50-a26f-cd3e0308fea9"),
                            ApplyDate = "Monday",
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(2943),
                            IsDelete = false,
                            MenuId = new Guid("5263453c-dae9-45e4-8204-5430a7256cde"),
                            Priority = false,
                            StoreId = new Guid("ef443e4b-886c-4c06-8528-51e9cf623867")
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Trip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TripEndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TripName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TripStartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("Trip");

                    b.HasData(
                        new
                        {
                            Id = new Guid("823ad122-7b51-4dab-9d37-b0f238d4a2ff"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(3702),
                            IsDelete = false,
                            RouteId = new Guid("ea675490-eecd-4308-bb71-61b72a9c979f"),
                            TripEndTime = new DateTime(2023, 7, 17, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TripName = "Camping Trip",
                            TripStartTime = new DateTime(2023, 7, 15, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9c2ab923-4c57-44d7-9c1a-b44c0d3e6b00"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(3752),
                            IsDelete = false,
                            RouteId = new Guid("001a254c-02d4-40e7-a01f-95f393fb41ef"),
                            TripEndTime = new DateTime(2023, 5, 25, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            TripName = "Road Trip",
                            TripStartTime = new DateTime(2023, 5, 20, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("02859382-d88c-4e69-8c47-b8e0456677d5"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(3778),
                            IsDelete = false,
                            RouteId = new Guid("a437b242-55fc-4146-a2b9-8c952b107e3a"),
                            TripEndTime = new DateTime(2023, 9, 15, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            TripName = "Cruise Vacation",
                            TripStartTime = new DateTime(2023, 9, 10, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("27421cac-1da7-4df8-9928-7fb636ca42aa"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(3798),
                            IsDelete = false,
                            RouteId = new Guid("ccc66514-0597-4d43-aaff-0c5d8ee59ffa"),
                            TripEndTime = new DateTime(2023, 11, 14, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            TripName = "Hiking Adventure",
                            TripStartTime = new DateTime(2023, 11, 12, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5b30c4e9-31ab-456c-b212-dc6b2ba9a3e7"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(3818),
                            IsDelete = false,
                            RouteId = new Guid("001a254c-02d4-40e7-a01f-95f393fb41ef"),
                            TripEndTime = new DateTime(2023, 12, 23, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            TripName = "Ski Getaway",
                            TripStartTime = new DateTime(2023, 12, 20, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9b4d232c-0fda-4ec0-beed-ecd649ee9c52"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(3838),
                            IsDelete = false,
                            RouteId = new Guid("42f184eb-58b3-4b9b-be52-1da57f8ffb3f"),
                            TripEndTime = new DateTime(2023, 8, 18, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            TripName = "Tropical Vacation",
                            TripStartTime = new DateTime(2023, 8, 13, 11, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("bf736039-33e9-466f-ac4e-78c89f3317e6"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(3858),
                            IsDelete = false,
                            RouteId = new Guid("a437b242-55fc-4146-a2b9-8c952b107e3a"),
                            TripEndTime = new DateTime(2023, 7, 6, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            TripName = "Amusement Park Fun",
                            TripStartTime = new DateTime(2023, 7, 4, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8a2ba7d5-7019-49c6-a47d-ab0a072e7932"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(3879),
                            IsDelete = false,
                            RouteId = new Guid("b9f8f712-92ee-4611-ad55-000a8e1b84c6"),
                            TripEndTime = new DateTime(2023, 10, 19, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            TripName = "African Safari",
                            TripStartTime = new DateTime(2023, 10, 19, 7, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d9852f0d-e836-4a6e-94f4-d229b297933d"),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(3900),
                            IsDelete = false,
                            RouteId = new Guid("a437b242-55fc-4146-a2b9-8c952b107e3a"),
                            TripEndTime = new DateTime(2023, 5, 8, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            TripName = "Botanical Gardens Tour",
                            TripStartTime = new DateTime(2023, 5, 6, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.WithDraw", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateTimeOfWithdraw")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Deposit")
                        .HasColumnType("float");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PaymentMethodID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("PaymentMethodID");

                    b.ToTable("WithDraw");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4e917707-0edb-49da-b6f4-804d2c52821b"),
                            ApplicationUserID = "E6DE8827-B7C2-46E9-9227-66E6ECE676A8",
                            Balance = 150000.0,
                            CreateTimeOfWithdraw = new DateTime(2023, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(4345),
                            Deposit = 60000.0,
                            IsDelete = false,
                            PaymentMethodID = new Guid("71b4bf27-e569-47a0-b16a-e484533bd9f2")
                        },
                        new
                        {
                            Id = new Guid("8efb8acc-2eb9-448d-bfa2-825995f50b59"),
                            ApplicationUserID = "E6DE8827-B7C2-46E9-9227-66E6ECE676A8",
                            Balance = 0.0,
                            CreateTimeOfWithdraw = new DateTime(2023, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(4381),
                            Deposit = 30000.0,
                            IsDelete = false,
                            PaymentMethodID = new Guid("71b4bf27-e569-47a0-b16a-e484533bd9f2")
                        },
                        new
                        {
                            Id = new Guid("0bd9818a-5ef1-45e3-a6fe-0c932f970fe8"),
                            ApplicationUserID = "E6DE8827-B7C2-46E9-9227-66E6ECE676A8",
                            Balance = 2000000.0,
                            CreateTimeOfWithdraw = new DateTime(2022, 12, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 11, 7, 2, 8, 5, 448, DateTimeKind.Local).AddTicks(4390),
                            Deposit = 125000.0,
                            IsDelete = false,
                            PaymentMethodID = new Guid("71b4bf27-e569-47a0-b16a-e484533bd9f2")
                        });
                });

            modelBuilder.Entity("MetroDelivery.Domain.IdentityModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<double?>("Wallet")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2198E4CD-3305-49C5-B78A-0B54DD76898F",
                            AccessFailedCount = 0,
                            Address = "da nang",
                            Birthday = new DateTime(2002, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "d838c00e-57e0-4e15-9b5b-d0d730ceae57",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nhan",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKqh5epiuN0gJQUkPH9djk9XV0Dpk4X60WBFWDm/7rRCskdkF7Ase4OqujmseiJJpA==",
                            PhoneNumber = "03030303",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "744a0f1d-76e3-48fe-a9cc-e2778fbd230c",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "E6DE8827-B7C2-46E9-9227-66E6ECE676A8",
                            AccessFailedCount = 0,
                            Address = "hcm",
                            Birthday = new DateTime(2010, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "24ec21b1-e6ca-43e5-a24d-ef348f327110",
                            Email = "enduser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Vi",
                            LastName = "EndUser",
                            LockoutEnabled = false,
                            NormalizedEmail = "ENDUSER@GMAIL.COM",
                            NormalizedUserName = "ENDUSER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPHg82x/ICYMq3JDNcqqcei/tLMvLHtvQ5Roca1tWaBDgbrYfMTaWEZ3Z1PUFvMPhA==",
                            PhoneNumber = "03030303",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bfb68c5b-999f-4931-b628-262d2dabc297",
                            TwoFactorEnabled = false,
                            UserName = "enduser@gmail.com"
                        },
                        new
                        {
                            Id = "2C0B43BB-B991-408E-A8F3-2FD3B4A2AB84",
                            AccessFailedCount = 0,
                            Address = "Cần Thơ",
                            Birthday = new DateTime(2002, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "34b22623-5920-4b48-96ff-91314b537901",
                            Email = "staff@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Vi",
                            LastName = "Staff",
                            LockoutEnabled = false,
                            NormalizedEmail = "STAFF@GMAIL.COM",
                            NormalizedUserName = "STAFF@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEG5aZrSYZnxmMHnIZjdCdWqNopa6/zDAUX49JS64YketDkBbeD2y4DPHNmluu4TjTA==",
                            PhoneNumber = "0961868641",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6b4f6e2b-00d2-4ec9-adcf-8b0fb820e006",
                            StoreId = new Guid("2f3eee35-1b8e-43af-956f-eacd94eea7cd"),
                            TwoFactorEnabled = false,
                            UserName = "staff@gmail.com"
                        },
                        new
                        {
                            Id = "2E089AF6-3437-4DD6-9956-BB792E783AFB",
                            AccessFailedCount = 0,
                            Address = "Đắk Lắk",
                            Birthday = new DateTime(1899, 8, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "731bb13d-0055-45f6-a659-0a202b3a5077",
                            Email = "nguyenthanhn537@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nhân",
                            LastName = "Nguyễn",
                            LockoutEnabled = false,
                            NormalizedEmail = "NGUYENTHANHN537@GMAIL.COM",
                            NormalizedUserName = "NGUYENTHANHN537@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPlAP7SQk+bnFv5w8BJlFIKwrpupPcJozegoCovDQBHD+ljeNXDEgS4ps1FjNqsX9Q==",
                            PhoneNumber = "0903182861",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9e1d2d93-a2f8-48e1-abfb-8bfeaf9c589f",
                            StoreId = new Guid("ef443e4b-886c-4c06-8528-51e9cf623867"),
                            TwoFactorEnabled = false,
                            UserName = "nguyenthanhn537@gmail.com"
                        },
                        new
                        {
                            Id = "1F11BA64-2870-43F7-BB03-867112867F25",
                            AccessFailedCount = 0,
                            Address = "Gia Lai",
                            Birthday = new DateTime(1998, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "79a4b6f5-b89c-4e27-8cc5-bea3e5cc47fd",
                            Email = "thaivin537@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Thái",
                            LastName = "Vĩ",
                            LockoutEnabled = false,
                            NormalizedEmail = "THAIVIN537@GMAIL.COM",
                            NormalizedUserName = "THAIVIN537@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAED/FUt9ofmvLLVm1kRHENUdBtKZ+RAzMBkxc24xDIK8SRgVZ7jSuMnDWO3W4+6w7qA==",
                            PhoneNumber = "0914009910",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df46614a-2724-4f29-a4ad-ffca9fae19b7",
                            TwoFactorEnabled = false,
                            UserName = "thaivin537@gmail.com"
                        },
                        new
                        {
                            Id = "C4EE82A1-DB88-49A6-81A8-4B9521FF01F9",
                            AccessFailedCount = 0,
                            Address = "Kon Tum",
                            Birthday = new DateTime(1998, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "a7a355b0-615d-4436-b94e-682c6382eb56",
                            Email = "anhjenda537@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Anh",
                            LastName = "Da Đen",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANHJENDA537@GMAIL.COM",
                            NormalizedUserName = "ANHJENDA537@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELJYMhy5PK0J9Skujbs0hKNunVPWOjwCTr4r9eeND0gOjR21X23HYjabV3gRS8b3vQ==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dcad1ae3-8638-421c-91af-d7b8dd00da8b",
                            TwoFactorEnabled = false,
                            UserName = "anhjenda537@gmail.com"
                        },
                        new
                        {
                            Id = "DB903C85-4C75-428B-A7B0-9B56130F4813",
                            AccessFailedCount = 0,
                            Address = "Đồng Nai",
                            Birthday = new DateTime(1998, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "473dc454-eacc-4406-a96f-8ca12262c4a9",
                            Email = "dungho537@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Dũng",
                            LastName = "Hồ",
                            LockoutEnabled = false,
                            NormalizedEmail = "DUNGHO537@GMAIL.COM",
                            NormalizedUserName = "DUNGHO537@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEC8yDubrLf5aGz80MRYXIslNeCVyRc3at8Y1niz3RdMIvrxPX12JfVSmkdLkvhea0A==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "02cd848a-7bb8-4ea6-ba29-d1046027e7a0",
                            TwoFactorEnabled = false,
                            UserName = "dungHo537@gmail.com"
                        },
                        new
                        {
                            Id = "8E48858E-7089-4512-BB79-75AEDC2003D6",
                            AccessFailedCount = 0,
                            Address = "Suối Tiên",
                            Birthday = new DateTime(1998, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "1a1cd568-b654-478e-97a5-89b7a7768cd2",
                            Email = "vinhttran537@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Vinh",
                            LastName = "Trần",
                            LockoutEnabled = false,
                            NormalizedEmail = "VINHTTRAN537@GMAIL.COM",
                            NormalizedUserName = "VINHTRAN537@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDA4t8mOJ70x3m2rWX09HwjCvCouzc9Q7W0KohGxrgwIjGJFwqltuPpKpX2bHsvLvA==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5444f0ca-9012-42f3-9c65-87f46a69ff1e",
                            TwoFactorEnabled = false,
                            UserName = "vinhtran537@gmail.com"
                        },
                        new
                        {
                            Id = "B76C9C1E-7F7F-4175-93B3-39B1285F0E71",
                            AccessFailedCount = 0,
                            Address = "Tây NGuyên",
                            Birthday = new DateTime(1998, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "f6c676ad-3e7e-4cf6-8e75-a96716240869",
                            Email = "nguyentrieu537@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nguyên",
                            LastName = "Triệu",
                            LockoutEnabled = false,
                            NormalizedEmail = "NGUYENTRIEU537@GMAIL.COM",
                            NormalizedUserName = "NGUYENTRIEU537@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAKTCGRJ8pfGKjK7ciab/yi9ucU2LcREC+CChD8kf7MhO7e/Ljti3OCXhyYo0+DxSg==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "74350db1-f77f-4d1e-8d17-9626efca3418",
                            TwoFactorEnabled = false,
                            UserName = "nguyentrieu537@gmail.com",
                            Wallet = 123456789.0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "CF531396-C1CD-427B-9D17-0383B7675394",
                            ConcurrencyStamp = "cd8f6e0b-5f9e-4b5d-b6da-a252363551cd",
                            Name = "EndUser",
                            NormalizedName = "EndUser"
                        },
                        new
                        {
                            Id = "AF5EB4AC-219A-4BC1-99FE-8C23876536EA",
                            ConcurrencyStamp = "8d4fbac9-d229-41fd-b10f-b3dcd93c6508",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "647D9649-F5A2-4F24-808F-6FC326EC2AA3",
                            ConcurrencyStamp = "36c444e5-5204-4edb-8de3-f844cae7737d",
                            Name = "Staff",
                            NormalizedName = "Staff"
                        },
                        new
                        {
                            Id = "04D67210-257D-4DD5-BAFC-13DDE8CA0DFE",
                            ConcurrencyStamp = "82d39867-a8c9-470d-97f0-d273d2885d1a",
                            Name = "Manager",
                            NormalizedName = "Manager"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2C0B43BB-B991-408E-A8F3-2FD3B4A2AB84",
                            RoleId = "647D9649-F5A2-4F24-808F-6FC326EC2AA3"
                        },
                        new
                        {
                            UserId = "E6DE8827-B7C2-46E9-9227-66E6ECE676A8",
                            RoleId = "CF531396-C1CD-427B-9D17-0383B7675394"
                        },
                        new
                        {
                            UserId = "2198E4CD-3305-49C5-B78A-0B54DD76898F",
                            RoleId = "AF5EB4AC-219A-4BC1-99FE-8C23876536EA"
                        },
                        new
                        {
                            UserId = "C4EE82A1-DB88-49A6-81A8-4B9521FF01F9",
                            RoleId = "04D67210-257D-4DD5-BAFC-13DDE8CA0DFE"
                        },
                        new
                        {
                            UserId = "2E089AF6-3437-4DD6-9956-BB792E783AFB",
                            RoleId = "04D67210-257D-4DD5-BAFC-13DDE8CA0DFE"
                        },
                        new
                        {
                            UserId = "1F11BA64-2870-43F7-BB03-867112867F25",
                            RoleId = "04D67210-257D-4DD5-BAFC-13DDE8CA0DFE"
                        },
                        new
                        {
                            UserId = "DB903C85-4C75-428B-A7B0-9B56130F4813",
                            RoleId = "04D67210-257D-4DD5-BAFC-13DDE8CA0DFE"
                        },
                        new
                        {
                            UserId = "8E48858E-7089-4512-BB79-75AEDC2003D6",
                            RoleId = "04D67210-257D-4DD5-BAFC-13DDE8CA0DFE"
                        },
                        new
                        {
                            UserId = "B76C9C1E-7F7F-4175-93B3-39B1285F0E71",
                            RoleId = "CF531396-C1CD-427B-9D17-0383B7675394"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Menu_Product", b =>
                {
                    b.HasOne("MetroDelivery.Domain.Entities.Menu", "Menu")
                        .WithMany("Menu_Product")
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroDelivery.Domain.Entities.Product", "Products")
                        .WithMany("Menu_Products")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Order", b =>
                {
                    b.HasOne("MetroDelivery.Domain.IdentityModels.ApplicationUser", "ApplicationUser")
                        .WithMany("Orders")
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroDelivery.Domain.Entities.Store", "Store")
                        .WithMany("Orders")
                        .HasForeignKey("StoreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroDelivery.Domain.Entities.Trip", "Trip")
                        .WithMany("Order")
                        .HasForeignKey("TripID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Store");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("MetroDelivery.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetail")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroDelivery.Domain.Entities.Product", "Products")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Product", b =>
                {
                    b.HasOne("MetroDelivery.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Route_Station", b =>
                {
                    b.HasOne("MetroDelivery.Domain.Entities.Route", "Route")
                        .WithMany("Route_Stations")
                        .HasForeignKey("RouteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroDelivery.Domain.Entities.Station", "Station")
                        .WithMany("Route_Stations")
                        .HasForeignKey("StationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Station", b =>
                {
                    b.HasOne("MetroDelivery.Domain.Entities.Store", "Store")
                        .WithOne("Station")
                        .HasForeignKey("MetroDelivery.Domain.Entities.Station", "StoreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Station_Trip", b =>
                {
                    b.HasOne("MetroDelivery.Domain.Entities.Station", "Station")
                        .WithMany("Station_Trip")
                        .HasForeignKey("StationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroDelivery.Domain.Entities.Trip", "Trip")
                        .WithMany("Station_Trip")
                        .HasForeignKey("TripID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Store_Menu", b =>
                {
                    b.HasOne("MetroDelivery.Domain.Entities.Menu", "Menu")
                        .WithMany("Store_Menu")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroDelivery.Domain.Entities.Store", "Store")
                        .WithMany("Store_Menu")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Trip", b =>
                {
                    b.HasOne("MetroDelivery.Domain.Entities.Route", "Route")
                        .WithMany("Trip")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.WithDraw", b =>
                {
                    b.HasOne("MetroDelivery.Domain.IdentityModels.ApplicationUser", "ApplicationUser")
                        .WithMany("WithDraws")
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroDelivery.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("WithDraw")
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MetroDelivery.Domain.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MetroDelivery.Domain.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroDelivery.Domain.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MetroDelivery.Domain.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Menu", b =>
                {
                    b.Navigation("Menu_Product");

                    b.Navigation("Store_Menu");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.PaymentMethod", b =>
                {
                    b.Navigation("WithDraw");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Product", b =>
                {
                    b.Navigation("Menu_Products");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Route", b =>
                {
                    b.Navigation("Route_Stations");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Station", b =>
                {
                    b.Navigation("Route_Stations");

                    b.Navigation("Station_Trip");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Store", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Station")
                        .IsRequired();

                    b.Navigation("Store_Menu");
                });

            modelBuilder.Entity("MetroDelivery.Domain.Entities.Trip", b =>
                {
                    b.Navigation("Order");

                    b.Navigation("Station_Trip");
                });

            modelBuilder.Entity("MetroDelivery.Domain.IdentityModels.ApplicationUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("WithDraws");
                });
#pragma warning restore 612, 618
        }
    }
}
